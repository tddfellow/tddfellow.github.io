<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pair-programming | That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/blog/categories/pair-programming/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2019-06-08T21:27:47+02:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Feedback Time at the End of the Pairing Session]]></title>
    <link href="http://www.tddfellow.com/blog/2017/03/22/feedback-time-at-the-end-of-the-pairing-session/"/>
    <updated>2017-03-22T08:01:29+01:00</updated>
    <id>http://www.tddfellow.com/blog/2017/03/22/feedback-time-at-the-end-of-the-pairing-session</id>
    <content type="html"><![CDATA[<p>Hi there! Today I want to share the technique that we are using to improve the collaboration inside of our teams. This technique is most useful in synergy with the pairing. It is so powerful that it can remove the tension from our work and make us more productive in two or three days.</p>

<p>First, let me give you some context.</p>

<!-- more -->


<h2>Pairing ~100% of the Time</h2>

<p>At <a href="https://pivotal.io">Pivotal</a> we pair all the time. It is very rare to see anyone solo. Pairing does not end with pair-programming, it also includes other roles such as design and product. Also, pairing is, at times, cross-functional, e.g.: product designer pairs with a software engineer, or product designer pairs with a product manager, etc. I love that.</p>

<p>With pairing, not everything is so shiny.</p>

<h3>Chemistry</h3>

<p>Now and then, you need to pair with someone, you have never paired with before. That happens in the event of new hires, team member rotations between teams, and cross-team pairing sessions.</p>

<p>We are all humans, so, from time to time, it feels like you are not getting along very well with your pair. There is a certain amount of tension. Of course, that harms your productivity, and, also, drains your energy.</p>

<p>On the contrary side, the chemistry between pairs might be so good, that you are just having fun the whole day and enjoy the pairing session, and the amount of work being done is suboptimal.</p>

<p>The pairing session might go not so well not only because of chemistry. Pairs could have chosen a non-suitable style of pairing (one of: ping-pong, switch on red, driver-navigator, etc.). From time to time, how pairs solve the problem, can also be improved.</p>

<h2>Five Minutes Feedback Time</h2>

<p>That is a technique that we are utilizing all the time when we have such problems. First, ask your pair if they want to apply this technique and reserve 5 minutes at the end of the pairing session (end of the work day is the most suitable). Then, when the time comes, give each other the feedback in the format of &ldquo;Pluses and Deltas&rdquo;:</p>

<ul>
<li>First, tell what went well.</li>
<li>Second, describe what could be improved.</li>
</ul>


<p>When both pairs are proficient with this technique, then most of the problems can be resolved in 2-4 pairing sessions. By &ldquo;proficient&rdquo; we mean here: both are open to receiving the feedback, and are capable of calling out complicated things without triggering defensiveness on the receiving side.</p>

<p>If the whole team applies this technique daily for two or three weeks, they will have to stop using it because there will be nothing to talk about anymore. That means that the team has solved most of the problems, and there is no longer need in a daily application of such technique.</p>

<h2>Conclusion</h2>

<p>All these problems are not unique to pairing. They are inherent to the collaboration. Essentially, any team will have these problems. It is just that, in non-pairing environments, these problems will become apparent only after months of work. That is all while they continue harming productivity and people&rsquo;s happiness for these long months.</p>

<p>With pairing these problems become apparent immediately. So you can start fixing them on the day one, and not after the half a year of the broken collaboration.</p>

<p>If you pair often, or if you have any other sort of collaboration within the team, I recommend trying out this technique. It will take some time to get proficient at giving feedback.</p>

<p>There is <a href="https://www.infoq.com/presentations/feedback-models-techniques">a marvelous talk</a> from <a href="https://dannorth.net">Dan North</a> on how to provide an effective feedback in different contexts.</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks, Reddit, and Hacker News, and follow me on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, donâ€™t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD as an Enabling Practice or How to Be Faster With TDD]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/13/tdd-as-an-enabling-practice-or-how-to-be-faster-with-tdd/"/>
    <updated>2016-06-13T07:52:56+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/13/tdd-as-an-enabling-practice-or-how-to-be-faster-with-tdd</id>
    <content type="html"><![CDATA[<p>Recently I had a lot of conversations with so many different programmers, with different backgrounds, contexts of work and opinions. What stroke me the most, is that majority feel that TDD is slower than simple automated testing, i.e., <code>TestFirst</code> is slower than <code>TestAfter</code>.</p>

<p>While digging deeper in their context of work, I could only agree with them: &ldquo;True, in that context it will be about 50% slower&rdquo;.</p>

<p>Most of the time, though, the context is somewhat looking like this:</p>

<ul>
<li>We have some company <code>ACME</code>, that does some sort of Agile Software Development (probably Scrum);</li>
<li>The company <code>ACME</code> focuses only on the business parts of Agile Software Development;</li>
<li>The company <code>ACME</code> tried to introduce TDD as a development practice;</li>
<li>Everything took much longer to be done.</li>
</ul>


<h2>Enabling practice</h2>

<p>Now, let us dive into the development practices of Agile Software Development: development practices are usually coming from Extreme Programming (XP). In XP there are 2 terms: <code>EnablingPractice</code> and <code>ExploitativePractice</code>.</p>

<p>Exploitative practice gives direct benefit to the team, e.g.: speed boost and quicker feedback from users and stakeholders.</p>

<p>Enabling practice is required for certain other exploitative practice(s) to work.</p>

<p>A good example of exploitative practice is Continuous Delivery. It requires Continuous Integration, Pair-Programming, and Testing to be in place. These 3 are enabling practices.</p>

<h2>Removing slow practices</h2>

<p>Additionally to allowing usage of practices, that make a team go faster and deliver at the higher quality level, enabling practices allow removal of practices, that make a team go slower. For example, Pair-Programming together with TDD allows removal of code review. On most of the teams (especially, of bigger size), this makes for an instant productivity boost.</p>

<p>Pair-Programming, TDD and Continuous Integration, additionally to enabling the team to do Continuous Delivery, also allows replacing feature-branch VCS flow with a trunk-based flow. This allows for smaller iterations and faster user feedback.</p>

<h2>Pair-Programming Done Right</h2>

<p>It is worth noting, that removal of code review and introducing of Continuous Delivery is only possible, if Pair-Programming is done right:</p>

<ul>
<li>in no case, two beginners should be working in the pair;</li>
<li>beginners should work together with advanced beginners/competents and proficients/experts;</li>
<li>advanced beginners/competents should split their time in half between working with beginners and working with proficient/experts.</li>
</ul>


<p>Terminology <code>Beginner</code>, <code>AdvancedBeginner</code>, <code>Competent</code>, <code>Proficient</code> and <code>Expert</code> is from Dreyfus Skill Acquisition Model.</p>

<p>That allows for a good trust and mentorship models in your team(s). It enables quick growth and knowledge sharing for every member of the team.</p>

<p>There is another enabling practice which speeds up the knowledge sharing, it is Pair Rotation, that should be done from 1 to 2 times per day, so that for small and middle-sized teams, the bigger the feature is, the higher chance, that everyone on the team have participated in its development, and therefore have enough knowledge about it.</p>

<p>Additionally, Pair Rotation allows for Code Detachment and removal of Code Silos. This in turn, together with TDD, enables Ruthless Refactoring, because you are not afraid:</p>

<ul>
<li>to break the code, thanks to TDD,</li>
<li>to upset an owner of the Code Silo, because there is no owner, thanks to Pair Rotation.</li>
</ul>


<h2>Bottomline</h2>

<p>I think I can go on like this forever, but I believe the idea should be clear. I will be following up with more articles in details on each technique in the future. Stay tuned!</p>

<h2>Thank you for reading!</h2>

<p>If you, my dear reader, have any thoughts, questions or arguments about the topic, feel free to reach out to me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you liked my ideas, follow me on twitter, and, even better, provide me with your honest feedback, so that I can improve.</p>
]]></content>
  </entry>
  
</feed>
