<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design-by-contract | That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/blog/categories/design-by-contract/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2016-11-13T13:28:17+01:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using contracts.ruby With RSpec. Part 2]]></title>
    <link href="http://www.tddfellow.com/blog/2015/08/31/using-contracts-dot-ruby-with-rspec-part-2/"/>
    <updated>2015-08-31T18:36:30+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/08/31/using-contracts-dot-ruby-with-rspec-part-2</id>
    <content type="html"><![CDATA[<p>Remember <a href="http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/">Using contracts.ruby With RSpec</a> ?</p>

<p>RSpec mocks violate all <code>:class</code> contracts because <code>is_a?(ClassName)</code> returns
<code>false</code> for mock. That post describes 2 possible solutions:</p>

<ul>
<li>stub <code>:is_a?</code>: <code>allow(my_double).to receive(:is_a?).with(MyClass).and_return(true)</code>, or</li>
<li>use <code>contracts-rspec</code> gem, that patches <code>instance_double</code> RSpec helper.</li>
</ul>


<h2>Custom validators</h2>

<p>Since custom validators have finally landed here:
<a href="https://github.com/egonSchiele/contracts.ruby/pull/159">egonShiele/contracts.ruby#159</a>,
now you can just override <code>:class</code> validator to accept all RSpec mocks:</p>

<pre><code class="ruby"># Make contracts accept all RSpec doubles
Contract.override_validator(:class) do |contract|
  lambda do |arg|
    arg.is_a?(RSpec::Mocks::Double) ||
      arg.is_a?(contract)
  end
end
</code></pre>

<p>Now, RSpec mocks will not violate all the <code>:class</code> contracts.</p>

<p>More information can be found here: <a href="https://github.com/egonSchiele/contracts.ruby/blob/v0.11.0/TUTORIAL.md#providing-your-own-custom-validators">Providing your own custom validators</a>.</p>

<p>Additionally this refactoring enabled valuable speed optimization for complex
contracts - validators for them will be evaluated only once and memoized.</p>

<h2>Links</h2>

<ul>
<li><a href="http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/">Previous part</a></li>
<li>contracts.ruby: <a href="https://github.com/egonSchiele/contracts.ruby">https://github.com/egonSchiele/contracts.ruby</a></li>
<li>contracts.ruby chat: <a href="https://gitter.im/egonSchiele/contracts.ruby">https://gitter.im/egonSchiele/contracts.ruby</a></li>
<li>Mentioned PR: <a href="https://github.com/egonSchiele/contracts.ruby/pull/159">https://github.com/egonSchiele/contracts.ruby/pull/159</a></li>
<li><a href="http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby/">Introduction to contracts.ruby</a></li>
<li><a href="https://egonschiele.github.io/contracts.ruby/">Great contracts.ruby tutorial</a></li>
<li><a href="https://github.com/egonSchiele/contracts.ruby/pull/195">Full fledged documentation PR</a>: see here staging docs: <a href="https://relishapp.com/contracts-staging/contracts-ruby/docs">https://relishapp.com/contracts-staging/contracts-ruby/docs</a></li>
</ul>


<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about how
contracts.ruby is awesome, you can ping me on twitter
<a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues using
<a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a> you can create
issues on corresponding github project. Pull requests are welcome!</p>

<p>Comments on <a href="https://news.ycombinator.com/item?id=10147783">hackernews</a>.</p>

<p>Happy coding! <a href="https://twitter.com/waterlink000">@waterlink000 on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using contracts.ruby With RSpec]]></title>
    <link href="http://www.tddfellow.com/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/"/>
    <updated>2015-04-09T21:51:53+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/04/09/using-contracts-dot-ruby-with-rspec</id>
    <content type="html"><![CDATA[<h2>Issues with RSpec mocks</h2>

<p>Lets start from example:</p>

<pre><code class="ruby">class Example
  include Contracts

  Contract Something =&gt; Any
  def do_something(something)
    something.call
  end
end
</code></pre>

<p>And its corresponding spec:</p>

<pre><code class="ruby">require "rspec"

RSpec.describe Example do
  let(:example) { Example.new }
  let(:something) { instance_double(Something, call: :hello) }

  it "works" do
    expect(example.do_something(something))
      .to eq(:hello)
  end
end
</code></pre>

<p>Pretty straightforward unit test for <code>Example#do_something</code>. But if you run <code>rspec</code> you will get:</p>

<pre><code>ContractError: Contract violation for argument 1 of 1:
    Expected: Something,
    Actual: #&lt;RSpec::Mocks::InstanceVerifyingDouble:0xa401a0 @name="Something (instance)"&gt;
    Value guarded in: Example::do_something
    With Contract: Something =&gt; Any
</code></pre>

<p>It happens because class contracts use <code>#is_a?</code> to determine if contract matches or not. Simply: <code>something.is_a?(Something)</code> is required to be <code>true</code>.</p>

<p>But if we try to do it with <code>instance_double</code>, that is what we get:</p>

<pre><code class="ruby">require "rspec/mocks/standalone"
something = instance_double(Something)
something.is_a?(Something)                              #=&gt; false
something.is_a?(RSpec::Mocks::InstanceVerifyingDouble)  #=&gt; true
</code></pre>

<h2>Solution to problem</h2>

<p>Pretty straightforward one:</p>

<pre><code class="ruby">let(:something) { instance_double(Something, call: :hello) }

before do
  allow(something)
    .to receive(:is_a?)
    .with(Something)
    .and_return(true)
end
</code></pre>

<p>But this can be boring to type it each time you need an <code>instance_double</code> while working with <code>contracts</code>. So here you go:</p>

<pre><code class="ruby"># Gemfile
group :test do
  gem "contracts-rspec"
end
</code></pre>

<p>Run <code>bundle</code> to install <code>contracts-rspec</code> gem.</p>

<pre><code class="ruby"># your spec file
require "contracts/rspec"

RSpec.describe Example do
  include Contracts::RSpec::Mocks

  # .. write code as in first example ..
end
</code></pre>

<p>Now you are covered. Inclusion of <code>Contracts::RSpec::Mocks</code> slightly alters behavior of <code>instance_double</code>. Now it automatically stubs out <code>#is_a?(Klass)</code> to return <code>true</code> on the class it was created from. In our case <code>Something</code>. This happens here: <a href="https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8">https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8</a></p>

<p>You can include it only in contexts you need, or you can do it globally from <code>spec_helper</code> like you do usually include spec helpers.</p>

<h2>Links</h2>

<ul>
<li>Gem: <a href="https://github.com/waterlink/contracts-rspec">https://github.com/waterlink/contracts-rspec</a></li>
<li>contracts.ruby: <a href="https://github.com/egonSchiele/contracts.ruby">https://github.com/egonSchiele/contracts.ruby</a></li>
<li>contracts.ruby chat: <a href="https://gitter.im/egonSchiele/contracts.ruby">https://gitter.im/egonSchiele/contracts.ruby</a></li>
<li>Born from here: <a href="https://github.com/egonSchiele/contracts.ruby/issues/14">egonSchiele/contracts.ruby#14</a></li>
<li><a href="http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby/">Introduction to contracts.ruby</a></li>
<li><a href="https://egonschiele.github.io/contracts.ruby/">Great contracts.ruby tutorial</a></li>
</ul>


<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about how contracts.ruby is awesome, you can ping me on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues using <a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a> or <a href="https://github.com/waterlink/contracts-rspec">contracts-rspec</a> you can create issues on corresponding github project. Pull requests are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Can contracts.ruby Be Used in the Community With Duck Typing Culture?]]></title>
    <link href="http://www.tddfellow.com/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture/"/>
    <updated>2015-03-10T11:11:23+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture</id>
    <content type="html"><![CDATA[<p>So, given simple example:</p>

<pre><code class="ruby">Contract Num, Num =&gt; Num
def add(a, b)
  a + b
end
</code></pre>

<p>One can ask: &ldquo;But it is ruby, what about duck typing, I want just pass two things that have certain methods defined on them&rdquo;</p>

<p>And my answer, you can easily do that:</p>

<pre><code class="ruby">Contract RespondTo[:save, :has_valid?], RespondTo[:to_s] =&gt; Any
def assign_user_a_default_email(user, default_email)
  user.email = default_email unless user.has_valid?(:email)
  user.save
end
</code></pre>

<p>This is a built-in <code>RespondTo</code> contract. You can get a list of all of them here: <a href="http://egonschiele.github.io/contracts.ruby/#built-in-contracts">http://egonschiele.github.io/contracts.ruby/#built-in-contracts</a></p>

<p>If you have any questions, you can always ping me at twitter <a href="https://twitter.com/waterlink000">@waterlink000</a></p>
]]></content>
  </entry>
  
</feed>
