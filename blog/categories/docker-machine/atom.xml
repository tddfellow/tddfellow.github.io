<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker-machine | That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/blog/categories/docker-machine/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2022-02-05T16:48:18+01:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Machine Guide (VirtualBox on Mac OS X)]]></title>
    <link href="http://www.tddfellow.com/blog/2015/08/31/docker-machine-guide-virtualbox-mac-os-x/"/>
    <updated>2015-08-31T10:21:06+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/08/31/docker-machine-guide-virtualbox-mac-os-x</id>
    <content type="html"><![CDATA[<p><em>(VirtualBox on Mac OS X)</em></p>

<p>This guide is a combination of official docs and usage experience.</p>

<h2>Installation</h2>

<p><em>Install virtualbox first
<a href="https://www.virtualbox.org/wiki/Downloads">virtualbox downloads</a>.</em></p>

<p>Look at this page: <a href="https://github.com/docker/machine/releases/">https://github.com/docker/machine/releases/</a> and pick latest
release. At the time of writing this is <code>v0.4.1</code>.</p>

<p>Now, assign version number to an environment variable, together with your
architecture:</p>

<pre><code class="bash">DOCKER_MACHINE_VERSION=v0.4.1
DOCKER_MACHINE_ARCH=darwin-amd64
</code></pre>

<p>Now download <code>docker-machine</code> binary and put it onto your <code>PATH</code> (recommended
is <code>~/bin/</code>):</p>

<pre><code class="bash">mkdir -p ~/bin
URL=https://github.com/docker/machine/releases/download/${DOCKER_MACHINE_VERSION}/docker-machine_${DOCKER_MACHINE_ARCH}
OUTPUT=~/bin/docker-machine
curl -L ${URL} &gt; ${OUTPUT}
chmod +x ${OUTPUT}
</code></pre>

<p>If you still haven&rsquo;t yet, put <code>~/bin/</code> on your <code>PATH</code> with <code>export
PATH=$PATH:$HOME/bin</code> into your <code>.bashrc</code> or <code>.zshrc</code> (or whatever shell you
use).</p>

<h2>Installing docker client</h2>

<pre><code class="bash">URL=https://get.docker.com/builds/Darwin/x86_64/docker-latest
OUTPUT=~/bin/docker
curl -L ${URL} &gt; ${OUTPUT}
chmod +x ${OUTPUT}
</code></pre>

<h2>Creating your first docker machine</h2>

<pre><code class="bash">docker-machine create -d virtualbox dev
</code></pre>

<p>This is how you create docker machine with name <code>dev</code> having virtualbox as a
backend.</p>

<p>But after some time you will encounter a problem of running out of memory. So
my recommended command to create your primary development docker machine is
this:</p>

<pre><code class="bash">docker-machine create -d virtualbox dev --virtualbox-memory "5120"
</code></pre>

<p>This will create virtualbox VM with enough memory to run low-to-moderate size
clusters with <code>docker-compose</code>. Which should be enough for development.</p>

<p>This should be your primary docker machine that is always activated and used.
There is no need to destroy and re-create this <code>dev</code> machine unless you are
testing some edge-cases. And better to use additional docker machine with
different name for this.</p>

<h2>Connecting to your <code>dev</code> docker machine</h2>

<pre><code class="bash">eval $(docker-machine env dev)
</code></pre>

<p>After this command, you will have everything you need to run <code>docker</code> in the same terminal:</p>

<pre><code class="bash"># Using alpine image here because it is only ~5 MB
docker run -it --rm alpine echo 'hello world'
</code></pre>

<p>You should see:</p>

<pre><code># .. pulling alpine image here .. and:
hello world
</code></pre>

<p>It might be annoying to run <code>eval $(docker-machine env dev)</code> each time you open
new terminal. So feel free to put this line into your <code>.bashrc</code> or <code>.zshrc</code> or
whatever shell you use:</p>

<pre><code class="bash"># in .bashrc:
eval $(docker-machine env dev)
</code></pre>

<p>If you have just powered on your Mac (or just stopped your docker machine) you
will experience this error:</p>

<pre><code>Error: Host does not exist: dev
</code></pre>

<p>In that case just start it with:</p>

<pre><code class="bash">docker-machine start dev
</code></pre>

<p>And re-open your terminal.</p>

<h2>Dealing with docker machine&rsquo;s IP address</h2>

<p>Fact: docker machine&rsquo;s IP address stays the same, usually 192.168.99.100,
unless:</p>

<ul>
<li>you destroy your docker machine <code>dev</code>, create another VirtualBox VM and
create docker machine <code>dev</code> afterwards, or</li>
<li>you have custom VirtualBox configuration.</li>
</ul>


<p>Given that docker machine&rsquo;s IP address stays the same or changes very rarely,
you can simply put its IP address in your <code>/etc/hosts</code>.</p>

<p>First, figure out current docker machine&rsquo;s IP address:</p>

<pre><code class="bash">docker-machine ip dev
</code></pre>

<p>And put it in <code>/etc/hosts</code>:</p>

<pre><code># in /etc/hosts

# Put IP address previous command has returned here:
192.168.99.100 docker-dev
</code></pre>

<p>To test that it works correclty try to run:</p>

<pre><code class="bash">docker run -it --rm -p 80:80 nginx
</code></pre>

<p>And now reach <code>http://docker-dev</code> in your browser - you should see default
Nginx page.</p>

<p>If you want to refer docker machine <code>dev</code> in your scripts, it is better to use
<code>$(docker-machine ip dev)</code> capabilities for that. For example, <code>curl</code>-ing the
page we have seen in browser just now:</p>

<pre><code class="bash">curl $(docker-machine ip dev)
</code></pre>

<p>For teams it would make sense to agree on the same name for primary development
docker machine. <code>dev</code> works just great!</p>

<p><em>NOTE: personally, I use both <code>docker-dev</code> and just <code>dev</code> as a hostname to type
less, but that might clash with something else, so <code>docker-dev</code> it is.</em></p>

<h2>Upgrading</h2>

<p>To upgrade <code>docker-machine</code> or <code>docker</code> binaries, just follow <code>Installation</code>
instructions again.</p>

<p>To upgrade <code>docker</code> server inside of already running docker machine, use:</p>

<pre><code class="bash">docker-machine upgrade dev
</code></pre>

<p>This will update to the latest version of <code>docker</code> server and <code>boot2docker</code>
image.</p>

<h2>Re-creating a fresh <code>dev</code> docker machine</h2>

<pre><code class="bash">docker-machine rm dev
docker-machine create -d virtualbox dev --virtualbox-memory "5120"
</code></pre>

<h2>Further reading</h2>

<ul>
<li><a href="https://docs.docker.com/machine/">Overview of Docker Machine</a></li>
<li><a href="https://docs.docker.com/machine/get-started/">Get started with Docker Machine and a local VM</a></li>
</ul>


<p>Comments on <a href="https://news.ycombinator.com/item?id=10146082">hackernews</a>.</p>

<p>Happy hacking! <a href="https://twitter.com/tdd_fellow">@tdd_fellow on twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
