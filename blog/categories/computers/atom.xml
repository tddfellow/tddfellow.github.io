<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computers | That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/blog/categories/computers/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2016-12-28T20:49:58+01:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Do You Need to Be Careful With Loop Variable in Go]]></title>
    <link href="http://www.tddfellow.com/blog/2016/01/08/why-do-you-need-to-be-careful-with-loop-variable-in-go/"/>
    <updated>2016-01-08T02:28:45+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/01/08/why-do-you-need-to-be-careful-with-loop-variable-in-go</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>This post describes two different issues:</p>

<h3>Race conditions when taking reference of loop variable and passing it to another goroutine:</h3>

<pre><code class="go">// WRONG: pass message by reference
for message := range inbox {
        outbox &lt;- EnhancedMessage{
                // .. more fields here ..
                Original: &amp;message,
        }
}

// CORRECT: pass message by value
for message := range inbox {
        outbox &lt;- EnhancedMessage{
                // .. more fields here ..
                // Pass message by value here
                Original: message,
        }
}
</code></pre>

<p>See explanation <a href="#taking_reference_of_loop_variable">here</a>.</p>

<h3>Race conditions when using loop variable inside of goroutine inside of loop:</h3>

<pre><code class="go">// WRONG: use loop variable directly from goroutine
for message := range inbox {
        go func() {
                // .. do something important with message ..
        }()
}

// CORRECT: pass loop variable by value as an argument for goroutine's function
for message := range inbox {
        go func(message Message) {
                // .. do something important with message ..
        }(message)
}
</code></pre>

<p>See explanation <a href="#running_goroutine_that_uses_loop_variable">here</a>.</p>

<h2><a href="#taking_reference_of_loop_variable" id="taking_reference_of_loop_variable">Taking reference of loop variable</a></h2>

<p>Lets start off with simple code example:</p>

<pre><code class="go">for message := range inbox {
        outbox &lt;- EnhancedMessage{
                // .. more fields here ..
                Original: &amp;message,
        }
}
</code></pre>

<p>Looks quite legit. In practice it will often cause race conditions. Because
<code>message</code> variable is defined once and then mutated in each loop iteration. The
variable is passed pointer to some concurrent collaborators, which causes race
conditions and very confusing bugs.</p>

<p>Above code can be re-written as:</p>

<pre><code class="go">// local scope begins here
        var (
                message Message
                ok bool
        )
        for {
                message, ok = &lt;-inbox
                if !ok {
                        break
                }

                outbox &lt;- EnhancedMessage{
                        // .. more fields here ..
                        Original: &amp;message,
                }
        }
// local scope ends here
</code></pre>

<p>Looking at this code, it is quite obvious why it would have race conditions.</p>

<p>Correct way of doing that would be to either define a new variable manually
each iteration and copy <code>message</code>&rsquo;s value into it:</p>

<pre><code class="go">for message := range inbox {
        m := message
        outbox &lt;- EnhancedMessage{
                // ...
                Original: &amp;m,
        }
}
</code></pre>

<p>Another way of doing that would be to take control of how loop variable works
yourself:</p>

<pre><code class="go">for {
        message, ok := &lt;-inbox
        if !ok {
                break
        }

        outbox &lt;- EnhancedMessage{
                // ...
                Original: &amp;message,
        }
}
</code></pre>

<p>Taking into account, that until the <code>EnhancedMessage</code> is processed by
concurrent collaborator and garbage collected, variables, created during each
iteration, i.e.: <code>m</code> and <code>message</code> for both examples, will stay in memory.
Therefore it is possible to just use pass-by-value instead of
pass-by-reference to achieve the same result. It is simpler too:</p>

<pre><code class="go">for message := range inbox {
        outbox &lt;- EnhancedMessage{
                // ...

                // Given the fact that `EnhancedMessage.Original` definition
                // changed to be of value type `Message`
                Original: message,
        }
}
</code></pre>

<p>Personally, I prefer latter. If you know of any drawbacks of this approach
comparing to other 2, or if you know of entirely better way of doing that,
please let me know.</p>

<h2><a href="#running_goroutine_that_uses_loop_variable" id="running_goroutine_that_uses_loop_variable">Running goroutine, that uses loop variable</a></h2>

<p>Example code:</p>

<pre><code class="go">for message := range inbox {
        go func() {
                // .. do something important with message ..
        }()
}
</code></pre>

<p>This code might look legit too. You might think it will process whole inbox
concurrently, but most probably it will process only a couple of last elements
multiple times.</p>

<p>If you rewrite the loop in a similar fashion as in
<a href="#taking_reference_of_loop_variable">previous section</a>, you would notice that
<code>message</code> would be mutated while these goroutines are still processing it. This
will cause confusing race conditions.</p>

<p>Correct way of doing that is:</p>

<pre><code class="go">for message := range inbox {
        go func(message Message) {
                // .. do something important with message ..
        }(message)
}
</code></pre>

<p>In this case, it is basically the same as copying the value to the new defined
variable at each iteration of the loop. It just looks nicer.</p>

<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about the topic,
you can ping me on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a> or
drop a comment on <a href="https://news.ycombinator.com/item?id=10864593">hackernews</a>.</p>

<p>Especially, if you think I am wrong somewhere in this article, please tell me,
I will only be happy to learn and iterate over this article to improve it.</p>

<p>Happy coding!</p>

<h2>Credits</h2>

<ul>
<li>Benjamin Lewis - proofreading. <a href="https://github.com/23inhouse/">Github</a>,
<a href="https://twitter.com/23inhouse">Twitter</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intention-revealing Code]]></title>
    <link href="http://www.tddfellow.com/blog/2015/09/08/intention-revealing-code/"/>
    <updated>2015-09-08T21:24:52+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/09/08/intention-revealing-code</id>
    <content type="html"><![CDATA[<p>Lets start off with very simple code:</p>

<pre><code class="go">func toJSON(post Post) string {
        return fmt.Sprintf(
                `{"post_title": "%s", "post_content": "%s"}`,
                post.Title,
                post.Content,
        )
}
</code></pre>

<p>This is very simple code and it is easy to understand what it is doing and what
it is doing wrong:</p>

<ul>
<li>It tries to marshal <code>post</code> struct to custom <code>JSON</code> representation.</li>
<li>It fails when there are special characters in these strings.</li>
<li>It does not use standard <code>MarshalJSON</code> interface.</li>
</ul>


<p>It can be fixed in a pretty simple way:</p>

<pre><code class="go">func (post Post) MarshalJSON() ([]byte, error) {
        return json.Marshal(map[string]interface{}{
                "post_title":   post.Title,
                "post_content": post.Content,
        })
}
</code></pre>

<p>And at the usage site, you can now just use standard <code>encoding/json</code> package
capabilities:</p>

<pre><code class="go">rawPost, err := json.Marshal(post)
if err != nil {
  return err
}

// do stuff with rawPost
</code></pre>

<p>And now you can notice that tests do not pass. And the place that failed is
totally unrelevant.  Long story short. Name of the original method was not
revealing any real intent: it was actually specific json representation for
usage with external API, but normal <code>json.Marshal</code> is used by this same
application for providing responses to its own HTTP clients.</p>

<p>Were the name a bit more intention-revealing, nobody would waste their time
on finding this out by trial and mistake:</p>

<pre><code class="go">// should probably even sit in different package
func marshalToExternalAPIFormat(post Post) ([]byte, err) {
        // ...
}
</code></pre>

<p>And this is only a tip of the iceberg of how non-intention-revealing code can
trip you over.</p>
]]></content>
  </entry>
  
</feed>
