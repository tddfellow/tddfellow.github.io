<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2016-11-13T13:28:17+01:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Your Own Testing Framework. Part 5]]></title>
    <link href="http://www.tddfellow.com/blog/2016/11/13/build-your-own-testing-framework-part-5/"/>
    <updated>2016-11-13T12:50:51+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/11/13/build-your-own-testing-framework-part-5</id>
    <content type="html"><![CDATA[<p>Welcome back to the new issue of &ldquo;Build Your Own Testing Framework&rdquo; series! Did you notice, that out testing framework quits on the first failure? It probably should run all tests, collect all failures and present them nicely. This is what we are going to accomplish today:</p>

<ul>
<li>Make sure all tests run even when there is a failure.</li>
<li>Make sure exit code is correct.</li>
</ul>


<!-- more -->


<p>This article is the fifth one of the series “Build Your Own Testing Framework” so make sure to stick around for next parts! Find all posts of these series can <a href="http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/">here</a>.</p>

<p>Shall we get started?</p>

<h2>Catch and report a test failure</h2>

<p>Our test suite should no longer bubble up any exceptions. We can achieve that by making an appropriate assertion. And also we should verify that other tests execute after the failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">FailureTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testItDoesNotBubbleUpExceptions</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">aSpy</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertNotThrow</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">testSomething</span> <span class="o">=</span> <span class="nx">aSpy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">aSpy</span><span class="p">.</span><span class="nx">assertCalled</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, this fails with an appropriate error <code>Error: Expected not to throw error, but thrown 'Expected to be true, but got false'</code> indicating that we are bubbling up all errors at the moment. Also, notice how the execution of the whole test suite stops at that point, and it just exits the program with error code <code>1</code>. A simple <code>try .. catch</code> block will fix the issue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in runTestSuite function</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// do nothing, for now</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tests now run successfully. This code is starting to become unreadable, so it is a good point to refactor. We will:</p>

<ul>
<li>Extract whole <code>try .. catch</code> as a function <code>runTest</code>. Its current responsibility is only to run the test and ignore any failure;</li>
<li>Extract contents of <code>if</code> statement that matches the test name as a function <code>handleTest</code>. Its responsibility is to report the test, create a fresh testSuite and kick off <code>runTest</code>;</li>
<li>Extract the whole <code>for</code> statement as <code>runAllTests</code>.</li>
</ul>


<p>Here is the final snippet of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">testSuite</span><span class="p">,</span> <span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do nothing, for now</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleTest</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testName</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">runTest</span><span class="p">(</span><span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">),</span> <span class="nx">testName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runAllTests</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">handleTest</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testName</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuitePrototype</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">getTestSuiteName</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runAllTests</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exit with code 1</h2>

<p>Now, when at least one test fails in a suite of tests, the whole suite should fail (after running the rest of its tests). And the indicator of such failure should be an exit code of the process. Let&rsquo;s write a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">FailureTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testItExitsWithProcessCodeOne</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">processSpy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProcessSpy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span><span class="nx">process</span><span class="o">:</span> <span class="nx">processSpy</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">processSpy</span><span class="p">.</span><span class="nx">hasExitedWithCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might guess, we will need another object. It will be responsible for interaction with our process, i.e.: something that we can ask to &ldquo;exit with code 1.&rdquo; Because we can not ask our process to exit within the test run, we will have to create a spy. And we shall test-drive its functionality. There is something interesting that we should worry about before that - our test suite is passing currently.. but it shouldn&rsquo;t be!</p>

<p>Let&rsquo;s step back and think what just happened: clearly, we are writing the test, that can not possibly pass because we do not have <code>ProcessSpy</code> yet. So we are expecting a failure - we are expecting a thrown exception. That expectation is an important part of test-driven development: at all times we expect a very specific failure or we expect our tests to pass; if we do not receive a failure when expected and receive an unexpected failure, we should stop right there and think which part of our thinking and our assumptions is incorrect.</p>

<div class="v2-subscribe--inline">
  
  
  
  
  
  


<div class="mc_embed_signup">
  <form action="//tddfellow.us14.list-manage.com/subscribe/post?u=535a10a8c0274c9a7ebac4f34&amp;id=6b61a409a5" method="post" class="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div class="mc_embed_signup_scroll">
      <h3>Would You Like to Watch a Screencast with Me Implementing This?</h3>
      <div class="mc-field-group">
        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_535a10a8c0274c9a7ebac4f34_6b61a409a5" tabindex="-1" value=""></div>
        <input type="email" value="" name="EMAIL" class="required email mce-EMAIL" placeholder="Enter your email">
        <input type="submit" value="Claim video" name="subscribe" class="button mc-embedded-subscribe">
      </div>
      <div class="">
        <em>(we respect your privacy, unsubscribe at any time)</em>
      </div>
    </div>
  </form>
</div>

</div>


<p>Right now, tests do not fail, because we are ignoring all exceptions in our <code>try .. catch</code> that we introduced a couple of minutes ago. If we want to see failures again, let&rsquo;s modify <code>catch</code> block to just log all errors it receives:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">testSuite</span><span class="p">,</span> <span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our test suite outputs an expected error: <code>ReferenceError: ProcessSpy is not defined</code>. Also, it outputs some other failures that happen in our nested <code>runTestSuite</code> calls - we should fix them by providing <code>silenceFailures</code> option for nested <code>runTestSuite</code> call. We can focus now on the <code>ProcessSpy</code> failure and test-drive it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">ProcessSpy_BehaviorTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">processSpy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProcessSpy</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// =&gt; ReferenceError: ProcessSpy is not defined</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">ProcessSpy</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="c1">// =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testHasExitedWithCode_initiallyIsNull</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">processSpy</span><span class="p">.</span><span class="nx">hasExitedWithCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="c1">// =&gt; Error: Expected to equal null, but got: undefined</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">ProcessSpy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hasExitedWithCode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testHasExitedWithCode_isZero_afterExitZeroCall</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">processSpy</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">processSpy</span><span class="p">.</span><span class="nx">hasExitedWithCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="c1">// =&gt; TypeError: processSpy.exit is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in ProcessSpy</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">exit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">hasExitedWithCode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="c1">// =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testHasExitedWithCode_isOne_afterExitOneCall</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">processSpy</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">processSpy</span><span class="p">.</span><span class="nx">hasExitedWithCode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="c1">// =&gt; Error: Expected to equal 1, but got: 0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in ProcessSpy</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">exit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">hasExitedWithCode</span> <span class="o">=</span> <span class="nx">code</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// changed 0 to code      ^here^</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we have finished test-driving the functionality of <code>ProcessSpy</code>. It is time to get back to our failing test for a failure resulting in an exit with code 1. When we run this test suite, we are getting the following error message: <code>Error: Expected to equal 1, but got: null</code>.&lsquo; To pass this test, we will need to store the fact that we had a failure somewhere and at the end of the test suite run we can trigger exit with code 1 or 0, respectively. We could pass around a <code>status</code> object with boolean property <code>status.failed</code> and set it to <code>true</code> in our <code>catch</code> block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">silenceFailures</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">status</span><span class="p">.</span><span class="nx">failed</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And at the end of <code>runTestSuite</code> function we could call <code>process.exit(1)</code> if <code>status.failed</code> was <code>true</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">failed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this works (as in &ldquo;tests pass after providing <code>fakeProcess</code> where needed for nested failing <code>runTestSuite</code> calls&rdquo;) state changes in this code are starting to be hard to follow and function signatures remind me of some horror movie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getTestSuiteName</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">)</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">testSuite</span><span class="p">,</span> <span class="nx">testName</span><span class="p">,</span> <span class="nx">silenceFailures</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleTest</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testName</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">silenceFailures</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">runAllTests</span><span class="p">(</span><span class="nx">reporter</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">,</span> <span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">silenceFailures</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These signatures smell like objects are hiding there in these functions. Let&rsquo;s find them!</p>

<h2>Quest for hidden objects</h2>

<p>First, let&rsquo;s extract the method object from the function <code>runTestSuite</code>. We will give it a name <code>TestSuiteRunContext</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">TestSuiteRunContext</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">process</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">process</span> <span class="o">||</span> <span class="nx">global</span><span class="p">.</span><span class="nx">process</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">silenceFailures</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">silenceFailures</span> <span class="o">||</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="p">{</span><span class="nx">failed</span><span class="o">:</span> <span class="kc">false</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuitePrototype</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">invoke</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">getTestSuiteName</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">)</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">runAllTests</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">reporter</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">testSuitePrototype</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">testSuiteConstructor</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">silenceFailures</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">status</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">failed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">TestSuiteRunContext</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">).</span><span class="nx">invoke</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if we were to move function <code>runAllTests</code> inside of this class, we would not need all these arguments (and all other functions we call):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">invoke</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reportTestSuite</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">runAllTests</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">finishTestRun</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">reportTestSuite</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="nx">getTestSuiteName</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getTestSuiteName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">createTestSuite</span><span class="p">().</span><span class="nx">getTestSuiteName</span><span class="p">)</span> <span class="o">!==</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">testSuiteConstructor</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">createTestSuite</span><span class="p">().</span><span class="nx">getTestSuiteName</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">createTestSuite</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runAllTests</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">createTestSuite</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">handleTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">runTest</span><span class="p">(</span><span class="nx">createTestSuite</span><span class="p">(),</span> <span class="nx">testName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">testSuite</span><span class="p">,</span> <span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">silenceFailures</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">status</span><span class="p">.</span><span class="nx">failed</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">finishTestRun</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">failed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It already looks very nice. The only thing that I do not like about this object yet is that it has stateful properties and stateless properties. I like to have my objects separated by this concern. Let&rsquo;s extract <code>status</code> mutable property as a proper <code>TestSuiteRunStatus</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">TestSuiteRunStatus</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">failed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">markAsFailed</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">failed</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hasFailed</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">failed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">TestSuiteRunContext</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestSuiteRunStatus</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">runTest</span><span class="p">(</span><span class="nx">testSuite</span><span class="p">,</span> <span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">silenceFailures</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">status</span><span class="p">.</span><span class="nx">markAsFailed</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">finishTestRun</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">hasFailed</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we have finished the refactoring. Now we should verify that test suite exits with the code 0 when everything passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItExitsWithProcessCodeZero_onSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span><span class="nx">process</span><span class="o">:</span> <span class="nx">processSpy</span><span class="p">,</span> <span class="nx">silenceFailures</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">processSpy</span><span class="p">.</span><span class="nx">hasExitedWithCode</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// =&gt; Error: Expected to equal 0, but got: null</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">finishTestRun</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">hasFailed</span><span class="p">())</span> <span class="k">return</span> <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bottom Line</h2>

<p>I think we have finished implementing exit code reporting. The code can be found here: <a href="https://github.com/waterlink/BuildYourOwnTestingFrameworkPart5">https://github.com/waterlink/BuildYourOwnTestingFrameworkPart5</a></p>

<p>There is still a lot to go through. In a few next episodes we will:</p>

<ul>
<li>Report OK and FAIL for each test;</li>
<li>Output carefully formatted failures to the STDERR;</li>
<li>Enable our testing framework to run multiple test suite files at once;</li>
<li>Enable our testing framework to run in a browser (it is javascript after all).</li>
</ul>


<p>Stay tuned!</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don’t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do More With Baby-Steps TDD]]></title>
    <link href="http://www.tddfellow.com/blog/2016/10/19/do-more-with-baby-steps-tdd/"/>
    <updated>2016-10-19T23:15:12+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/10/19/do-more-with-baby-steps-tdd</id>
    <content type="html"><![CDATA[<p>Hello everyone! I&rsquo;m usually advocating for the Baby-Steps Test-Driven Development with Triangulation. On the first encounter, this technique seems very verbose and everybody wonders how can it possibly work and why I am very productive with it. Let me tell you about that. First, let&rsquo;s quickly recap both techniques:</p>

<!--more-->


<h2>Baby-Steps TDD</h2>

<p>In Baby-Steps TDD the basic strategy is to get to the green state ASAP. If you can pass all tests with <code>return 42</code>, you should! While the benefit of the approach is not directly obvious exploring the alternative shows its value. One possible alternative is to write a bunch of tests for the software and then make them all pass. This results in a lot of changes made to the software under the test while tests are failing (are in red state). This provides very slow feedback and high risks because with every decision in the code complexity grows exponentially and problems are hard to find when you only know that software worked 1 hour ago and there is one mistake in a whole 1 hour worth of work. The same effect can be seen if the most complex test is written first so that it forces the engineer to implement the whole solution or big part of it in one go.</p>

<p>Baby-Steps TDD mitigates the issue by ensuring everything worked one or two minutes ago. At least to the extent the software is specified by currently written tests. So if something does not work as expected it is most probably a mistake in these last 2-3 lines of code that we have written. And we can even discard them entirely with &ldquo;undo&rdquo; command and start over from the green state without losing much work and saving a whole lot of time debugging.</p>

<p>Baby-Steps TDD provides faster feedback and fewer risks for the cost of a bit more overall effort. Let&rsquo;s take a look into the triangulation technique:</p>

<div class="v2-subscribe--inline">
  




  


<div class="mc_embed_signup">
  <form action="//tddfellow.us14.list-manage.com/subscribe/post?u=535a10a8c0274c9a7ebac4f34&amp;id=7f9f94015a" method="post" class="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div class="mc_embed_signup_scroll">
      <h3>Want more articles like this delivered to your inbox?</h3>
      <div class="mc-field-group">
        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_535a10a8c0274c9a7ebac4f34_7f9f94015a" tabindex="-1" value=""></div>
        <input type="email" value="" name="EMAIL" class="required email mce-EMAIL" placeholder="Enter your email">
        <input type="submit" value="Subscribe" name="subscribe" class="button mc-embedded-subscribe">
      </div>
      <div class="">
        <em>(we respect your privacy, unsubscribe at any time)</em>
      </div>
    </div>
  </form>
</div>


</div>


<h2>Triangulation Technique</h2>

<p>In essence, Triangulation Technique takes ideas of Baby-Steps TDD further and reduces step size even further. For example, when usually with Baby-Steps TDD you would need one test to introduce the correct <code>if</code> statement, with Triangulation Technique and Baby-Steps TDD combined you would use multiple tests for this:</p>

<ul>
<li>The first test for the most degenerated case which requires one to write a simple <code>return CONSTANT</code> statement to pass:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The second test for the same case where the result will be different which requires one to promote <code>CONSTANT</code> to some sort of calculation (variable, formula or function call):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="nx">n</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The third test for the other case which requires one to write a specific <code>if (argument == SPECIFIC_VALUE)</code> with another <code>return ANOTHER_CONSTANT</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">n</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The fourth test for the same case where the result will be different which requires one to promote <code>ANOTHER_CONSTANT</code> to some sort of calculation (variable, formula or function call):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span> <span class="o">*</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">n</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The fifth test for the same case where the condition has to be different which requires one to promote specific condition to the proper one:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;=</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span> <span class="o">*</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>In normal Baby-Steps TDD that would probably have been only 2 or 3 test cases. With Triangulation it is 5 and to make every one of them pass requires a simple transformation of the production code.</p>

<p>Now let&rsquo;s see why these techniques combined make me more productive.</p>

<h2>Willpower Depletion</h2>

<p>Did you know that every decision you make costs you some willpower? For example: choosing what to wear in the morning, refusing to eat this tasty cake or to make a design choice in your code. This phenomenon is known as Ego Depletion (<a href="https://en.wikipedia.org/wiki/Ego_depletion">see in wiki</a>) and it has an experimental evidence. According to this phenomenon self-control and willpower both draw upon a limited pool of mental resources and it can be used up. Usually, these resources are recovered greatly during good night&rsquo;s sleep or slightly after consuming food. Cost per each made decision differs also and even for the same kind of decision can depend on various factors:</p>

<ul>
<li>perceived complexity of the problem,</li>
<li>mood, physical state and perceived fatigue of the person (tired, angry, confused, happy, energized, etc.),</li>
<li>required effort to make and execute the decision,</li>
<li>blood glucose levels.</li>
</ul>


<p>Baby-Steps TDD combined with Triangulation technique optimize for &ldquo;perceived complexity of the problem&rdquo; so that every decision is nearly obvious to make and the effort required to make it and execute on it is stupidly small. While this increases the amount of decisions that I need to make it also decreases the complexity and willpower cost of each decision to the point, where after completing the same amount of work I still have plenty of energy and willpower to make any other decisions at work and outside of it.</p>

<p>It is worth noting that these techniques need to be practiced quite a bit to enable this effect - with such incremental design it is important to <a href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/">avoid getting stuck</a>. Definitely, try it out and see if it works for you!</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<h2>Acknowledgements</h2>

<p>Thanks to David Völkel for the great presentation about Baby-Steps TDD. Slides can be found <a href="http://www.slideshare.net/davidvoelkel/baby-steps-tdd-approaches">here</a>.</p>

<p>Thanks to Stephen Guise for the great book &ldquo;Mini Habits&rdquo; that has opened my eyes to the reasons why I like these techniques so much and why I love designing software in tiny increments.</p>

<p><a target="_blank"  href="https://www.amazon.com/gp/product/1494882272/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1494882272&linkCode=as2&tag=tddfellow-20&linkId=acc11b87f4487fb0e318cc49d8d8302d"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=1494882272&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=tddfellow-20" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HighScore Kata]]></title>
    <link href="http://www.tddfellow.com/blog/2016/09/30/highscore-kata/"/>
    <updated>2016-09-30T18:23:21+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/09/30/highscore-kata</id>
    <content type="html"><![CDATA[<p>Hello, everyone. Today we will take a look into a little problem involving high scores in some sort of game. The game has only one high score and when current game&rsquo;s score exceeds that number, it gets updated. Example acceptance test would read like this:</p>

<p><strong>Given</strong> high score is <code>174</code><br/>
<strong>When</strong> player scores <code>191</code><br/>
<strong>Then</strong> high score is <code>191</code></p>

<!--more-->


<p>Current implementation stores high score in the web browser&rsquo;s local storage. This detail does not change the purpose of this Kata very much since any other platform and language can have its own analog of local storage (file system, in-memory or local database, application settings, etc.). <code>HighScore</code> object looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Highscore</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// initially, load high score value from the local storage</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">load</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Highscore</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateHighscore</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// check if we need to update high score</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">highscore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">highscore</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// render the high score in the</span>
</span><span class='line'>    <span class="c1">// id=&quot;highscore&quot; element in the browser</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#highscore&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;HIGHSCORE: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">highscore</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Highscore</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// localStorage is storing everything as strings,</span>
</span><span class='line'>    <span class="c1">// so we need to convert it to number</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">highscore</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">highscore</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Highscore</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">highscore</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">highscore</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Task for the Kata:</p>

<ul>
<li>Write tests for this class.</li>
<li>Fix the bug: when a game is launched on the new client (without the high score stored), it renders <code>HIGHSCORE: NaN</code>. (<code>NaN</code> is javascript&rsquo;s abbreviation for &ldquo;not a number&rdquo;). <code>parseFloat</code> most probably is a culprit for this.</li>
<li>Extract storing mechanisms, so that class can be re-used with different storage mechanisms (for example local database, or external REST API).</li>
<li>Make all tests runnable outside of the context of the browser (for example, on <code>nodejs</code>).</li>
</ul>


<p>The focus of this Kata is on architectural boundaries, that this little innocent class spans.</p>

<p>Questions to ask yourself:</p>

<ul>
<li>How much distinct responsibilities this class has?</li>
<li>What architectural boundaries should I draw through this class?

<ul>
<li>How do I split this class according to these boundaries?</li>
</ul>
</li>
<li>What is the easiest way and what is the proper way to make tests runnable outside of the context of the browser?</li>
<li>How would this code look like in different kinds of languages? (static, dynamic, object-oriented, functional, strong-typed, etc.).

<ul>
<li>And how the solution for the Kata will look like for these?</li>
</ul>
</li>
</ul>


<p>Next time we will take a look at one possible solution for this Kata. Try to solve it on your own, my dear reader, and please share the code and insights!</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meet Duck Type]]></title>
    <link href="http://www.tddfellow.com/blog/2016/09/18/meet-duck-type/"/>
    <updated>2016-09-18T16:37:33+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/09/18/meet-duck-type</id>
    <content type="html"><![CDATA[<h2>Duck type</h2>

<p>Duck type is the concept in the domain of the type safety that represents objects, that pass a so-called &ldquo;Duck Test&rdquo;:</p>

<blockquote><p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</p></blockquote>

<p>In terms of programming language, it might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Duck</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">swim</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">coordinates</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">quack</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">sentence</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">RoboDuck</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">swim</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">coordinates</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">quack</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">sentence</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .. and so on ..</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>The point is that the public interface has methods <code>swim()</code> and <code>quack()</code>. This is how you identify the duck in a programming language. This concept is very similar to the concept of the <code>interface</code> in programming languages that have one, but it is not enforced in any way by the programming language.</p>

<p>Duck typing is mostly natural in dynamic languages, where it is possible to send any message to any object and the check if that is something possible will happen at runtime. In static languages, it is still possible to use duck typing via some sort of Reflection.</p>

<h3>Contract test for duck types</h3>

<p>In a dynamic language, it is important to make it obvious, that something is implementing certain duck type by writing one test suite for all implementers and executing it against them. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">Duck</span><span class="p">,</span> <span class="nx">RoboDuck</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">duckType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testItSwimsLikeADuck</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">duckType</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">duck</span><span class="p">.</span><span class="nx">swim</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">7</span><span class="p">});</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertThat</span><span class="p">(</span><span class="nx">duck</span><span class="p">).</span><span class="nx">swamTo</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">7</span><span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testItQuacksLikeADuck</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">duckType</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">duck</span><span class="p">.</span><span class="nx">quack</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertThat</span><span class="p">(</span><span class="nx">duck</span><span class="p">).</span><span class="nx">quacked</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test suite has to go only through the Duck type public interface. If it is not possible to test behavior through it, one should test at least the function signatures, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItSwimsLikeADuck</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">duckType</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">swim</span> <span class="o">=</span> <span class="nx">duck</span><span class="p">.</span><span class="nx">swim</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">swim</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">swim</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not doing contract tests for your ducks may result in a passing test suite and broken production code. For example, when one duck and its test suite have been updated, but others haven&rsquo;t.</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Test Doubles]]></title>
    <link href="http://www.tddfellow.com/blog/2016/09/18/introducing-test-doubles/"/>
    <updated>2016-09-18T16:31:48+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/09/18/introducing-test-doubles</id>
    <content type="html"><![CDATA[<p>A test double is a test object or a test function, that looks and behaves like its production counterpart, but is actually a simplified version that reduces the complexity and enables simpler testing. One can represent all types of test double as an inheritance tree like this:</p>

<p><img src='//g.gravizo.com/g?
@startuml;
object Double;
object Dummy;
object Stub;
object Spy;
object Mock;
object Fake;
Double <|-- Dummy;
Double <|-- Fake;
Dummy <|-- Stub;
Stub <|-- Spy;
Spy <|-- Mock;
@enduml;
'/></p>

<p>Where <code>Double</code> is an abstract test double, which has no functionality - it is a general concept to talk about test doubles.</p>

<!--more-->


<p><code>Dummy</code> - is a test double, that is used to fill parameter lists, in cases where these parameters are not used by production code. Simplest <code>Dummy</code> would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ExampleDummyObject</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">doSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">getSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">exampleDummyFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage example in test</span>
</span><span class='line'><span class="nx">someObject</span><span class="p">.</span><span class="nx">someMethod</span><span class="p">(</span><span class="nx">dummyObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">someFunction</span><span class="p">(</span><span class="nx">exampleDummyFunction</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Stub</code> - is a test dummy, additionally, providing an indirect input for the production code from the test. &ldquo;Indirect&rdquo; means here via a method call on the stub object or a call of the stub function. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ExampleStubObject</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">something</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">getSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">something</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">stubSomething</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">somethingValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">something</span> <span class="o">=</span> <span class="nx">somethingValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">someValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">exampleStubFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">someValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage example in the test</span>
</span><span class='line'><span class="nx">stubObject</span><span class="p">.</span><span class="nx">stubSomething</span><span class="p">(</span><span class="s2">&quot;a value from the test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">anObject</span><span class="p">.</span><span class="nx">aMethod</span><span class="p">(</span><span class="nx">stubObject</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">someValue</span> <span class="o">=</span> <span class="s2">&quot;a value from the test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">someFunction</span><span class="p">(</span><span class="nx">exampleStubFunction</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div class="v2-subscribe--inline">
  




  


<div class="mc_embed_signup">
  <form action="//tddfellow.us14.list-manage.com/subscribe/post?u=535a10a8c0274c9a7ebac4f34&amp;id=7f9f94015a" method="post" class="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div class="mc_embed_signup_scroll">
      <h3>Want more articles like this delivered to your inbox?</h3>
      <div class="mc-field-group">
        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_535a10a8c0274c9a7ebac4f34_7f9f94015a" tabindex="-1" value=""></div>
        <input type="email" value="" name="EMAIL" class="required email mce-EMAIL" placeholder="Enter your email">
        <input type="submit" value="Subscribe" name="subscribe" class="button mc-embedded-subscribe">
      </div>
      <div class="">
        <em>(we respect your privacy, unsubscribe at any time)</em>
      </div>
    </div>
  </form>
</div>


</div>


<p><code>Spy</code> - is a test stub, additionally, verifying an indirect output of the production code, by asserting afterward, without having defined the expectations before the production code is executed. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ExampleSpyObject</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">didSomethingWithName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">somethingValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">doSomethingWith</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">didSomethingWithName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">somethingValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">stubSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">something</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">somethingValue</span> <span class="o">=</span> <span class="nx">something</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">assertDidSomethingWithName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">didSomethingWithName</span> <span class="o">===</span> <span class="nx">expectedName</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected to do something with &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">withName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">exampleValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">exampleSpyFunction</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">withName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">exampleValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">verifyExampleSpyFunction</span><span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">withName</span> <span class="o">===</span> <span class="nx">expectedName</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Expected to be called with &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage in the test</span>
</span><span class='line'><span class="nx">spyObject</span><span class="p">.</span><span class="nx">stubSomething</span><span class="p">(</span><span class="s2">&quot;a value from the test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">anObject</span><span class="p">.</span><span class="nx">aMethod</span><span class="p">(</span><span class="nx">spyObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">spyObject</span><span class="p">.</span><span class="nx">assertDidSomethingWithName</span><span class="p">(</span><span class="s2">&quot;helloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exampleValue</span> <span class="o">=</span> <span class="s2">&quot;a value from the test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">someFunction</span><span class="p">(</span><span class="nx">exampleSpyFunction</span><span class="p">);</span>
</span><span class='line'><span class="nx">verifyExampleSpyFunction</span><span class="p">(</span><span class="s2">&quot;helloWorld&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mock</code> - is a stub, but the expectations are defined before the execution of the production code and it can verify itself after the execution. A simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ExampleMockObject</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">expectedName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fulfilled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">somethingValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">expectWillDoSomethingWithName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expectedName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">doSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">name</span> <span class="o">===</span> <span class="nx">expectedName</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Unexpected name &#39;&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;&#39;,&quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="s2">&quot; expecting: &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fulfilled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">somethingValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">stubSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">somethingValue</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">verify</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">fulfilled</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected to receive name &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39;, &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="s2">&quot;but got nothing&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the usage from the test:</span>
</span><span class='line'><span class="nx">mockObject</span><span class="p">.</span><span class="nx">stubSomething</span><span class="p">(</span><span class="s2">&quot;a value from the test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">mockObject</span><span class="p">.</span><span class="nx">expectWillDoSomethingWithName</span><span class="p">(</span><span class="s2">&quot;helloWorld&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">anObject</span><span class="p">.</span><span class="nx">aMethod</span><span class="p">(</span><span class="nx">mockObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">mockObject</span><span class="p">.</span><span class="nx">verify</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mocks can be much more complex (verifying order of messages, allowing multiple messages to be sent, etc.). So it is recommended to either:</p>

<ul>
<li>avoid them and use simpler test doubles, or</li>
<li>use a full-blown well-tested mocking framework.</li>
</ul>


<p>And if you do have to use your own custom mocks, please, write tests for them, since they can have a lot of logic inside of them.</p>

<p>And, finally, <code>Fake</code> - is a test double providing a simpler implementation used in the tests instead of the real thing. A good example is an in-memory database gateway, that behaves the same way the real one would, but it stores all the data in the memory. A very simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FakeDatabase</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">objects</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">objects</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">object</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">findById</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">objects</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">findByName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">objects</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">objects</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">objects</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">objects</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, fakes require full-blown testing for them. And if the real implementation is testable (even if it is slow), it is a good idea to have the same test suite for both: fake and real implementation. This way we can really be sure, that the fake behaves the same way as the real thing. And don&rsquo;t forget about the edge cases, for example, if the real thing can throw a <code>ConnectionError</code>, the fake should be able too (after being instructed to do so via a special method in the tests).</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Testing Framework. Part 4]]></title>
    <link href="http://www.tddfellow.com/blog/2016/09/17/build-your-own-testing-framework-part-4/"/>
    <updated>2016-09-17T10:00:32+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/09/17/build-your-own-testing-framework-part-4</id>
    <content type="html"><![CDATA[<p>Welcome back to the new issue of &ldquo;Build Your Own Testing Framework&rdquo; series! As you might have noticed, currently, our testing framework only outputs failures and nothing else. It is impossible to know if it actually runs any tests when they all pass because there is no output. Today we will implement a simple reporter for our testing framework. It will report the name of the test suite and names of the tests that are being executed, for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SpyTest
</span><span class='line'>    testIsNotCalledInitially
</span><span class='line'>    testAssertNotCalledFailsWhenWasCalled
</span><span class='line'>    testIsCalledAfterBeingCalled
</span><span class='line'>    testAssertCalledFailsWhenWasNotCalled</span></code></pre></td></tr></table></div></figure>


<p>This article is the fourth one of the series &ldquo;Build Your Own Testing Framework&rdquo;, so make sure to stick around for next parts! All articles of these series can be found <a href="http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/">here</a>.</p>

<p>Shall we get started?</p>

<!--more-->


<h2>Render the name of the test suite</h2>

<p>So where should the name of the test suite come from? Probably it should be a test suite class name. Currently, all of them are anonymous classes and therefore don&rsquo;t have a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//         ^          ^</span>
</span><span class='line'>  <span class="c1">//       - no name here -</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We would like all test suites to have that name, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">SpyTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//                 ^       ^</span>
</span><span class='line'>  <span class="c1">//            - here is the name -</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should write a test for this case:</p>

<ol>
<li>Create a test suite with the name</li>
<li>Run the test suite with function <code>runTestSuite</code></li>
<li>Assert that the test suite name is reported</li>
</ol>


<p>Let&rsquo;s try to write a test in a <code>RunTestSuiteTest.js</code> test suite for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// TODO: assert that the test suite name is reported</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it is problematic: how are we going to assert that something is reported? Should we replace <code>console.log(message)</code> or <code>process.stdout.write(message)</code> with our own implementation, so that we can test it?:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">logged</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">oldConsoleLog</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">logged</span> <span class="o">=</span> <span class="nx">logged</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then we should be able to assert with: <code>t.assertTrue(logged.indexOf("TestSuiteName") &gt;= 0)</code>. Finally we will need to restore the old <code>console.log</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">logged</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">oldConsoleLog</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">logged</span> <span class="o">=</span> <span class="nx">logged</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">logged</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">oldConsoleLog</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this code works, it has multitude of problems:</p>

<ul>
<li>If the test fails then <code>oldConsoleLog</code> function is not restored;</li>
<li>It has too much setup (which we could extract as a function);</li>
<li>It has teardown (which would be nice to avoid if we could);</li>
<li>It is hard to read because from 8 lines of code only 2 are delivering the core intent;</li>
<li>And it is testing how exactly test suite name is being reported, which is basically a View-like concern.</li>
</ul>


<p>And fixing the last problem will actually fix everything else because this problem causes others. We can fix it by introducing some sort of <code>Reporter</code> type, that can respond to <code>reportTestSuite(name)</code> message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">reporter</span><span class="o">:</span> <span class="nx">reporter</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">reporter</span><span class="p">.</span><span class="nx">hasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// or even better:</span>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>reporter</code> in this case is some sort of test double. And what are they? - Find out here: <a href="http://www.tddfellow.com/blog/2016/09/18/introducing-test-doubles/">Introducing Test Doubles</a>.</p>

<h2>Implementing the reporter spy</h2>

<p>So our <code>reporter</code> object in the test seems terribly like a Spy Double to me, let&rsquo;s test-drive it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/ReporterSpyTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ReporterSpy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./ReporterSpy&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">ReporterSpy_BehaviorTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Let&#39;s write our first test:</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTestSuite_whenFailing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;Expected test suite &#39;HelloWorld&#39; to be reported&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;HelloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Cannot find module &#39;./ReporterSpy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create file test/ReporterSpy.js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are getting the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//     var reporter = new ReporterSpy(t);</span>
</span><span class='line'><span class="c1">//                    ^</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// TypeError: ReporterSpy is not a function</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to create ReporterSpy object now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are getting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Error: Expected to equal</span>
</span><span class='line'><span class="c1">//   Expected test suite &#39;HelloWorld&#39; to be reported,</span>
</span><span class='line'><span class="c1">// but got:</span>
</span><span class='line'><span class="c1">//   reporter.assertHasReportedTestSuite is not a function</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to create a function <code>assertHasReportedTestSuite(name)</code> for out <code>ReporterSpy</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>    <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Expected test suite &#39;HelloWorld&#39; to be reported&quot;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to make sure, that <code>expectedName</code> is actually present in the error message by triangulating with different name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTestSuite_whenFailing_withOtherName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test suite &#39;OtherTestSuite&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;OtherTestSuite&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal</span>
</span><span class='line'><span class="c1">//   Expected test suite &#39;OtherTestSuite&#39; to be reported,</span>
</span><span class='line'><span class="c1">// but got:</span>
</span><span class='line'><span class="c1">//   Expected test suite &#39;HelloWorld&#39; to be reported</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And we need to change the respective string:</span>
</span><span class='line'><span class="s2">&quot;Expected test suite &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we need to make sure that we do succeed when the message is received:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTestSuite_whenSucceeding</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertNotThrow</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="s2">&quot;HelloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;HelloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error:</span>
</span><span class='line'><span class="c1">//   Expected not to throw error,</span>
</span><span class='line'><span class="c1">// but thrown</span>
</span><span class='line'><span class="c1">//   &#39;reporter.reportTestSuite is not a function&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// So we need to define this function in ReporterSpy:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">reportTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error:</span>
</span><span class='line'><span class="c1">//   Expected not to throw error,</span>
</span><span class='line'><span class="c1">// but thrown</span>
</span><span class='line'><span class="c1">//   &#39;Expected test suite &#39;HelloWorld&#39; to be reported&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now we need to provide the simplest implementation we can,</span>
</span><span class='line'><span class="c1">// we can do that by introducing the boolean variable:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initially nothing is reported</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">hasReported</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="c1">// we should fail only when nothing was reported</span>
</span><span class='line'>      <span class="nx">hasReported</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected test suite &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reportTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// and we mark it as reported when we do receive the message</span>
</span><span class='line'>    <span class="nx">hasReported</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And all our tests pass. Now, when the wrong name is getting reported we should still fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTestSuite_whenReporting_andFailing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test suite &#39;HelloWorld&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="s2">&quot;OtherTestSuite&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;HelloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to throw an error,</span>
</span><span class='line'><span class="c1">// but nothing was thrown</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now we need to actually store the name of reported test suite:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initially, we didn&#39;t receive any reports</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testSuiteName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="c1">// we fail only if received testSuiteName is not right</span>
</span><span class='line'>      <span class="nx">testSuiteName</span> <span class="o">===</span> <span class="s2">&quot;HelloWorld&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected test suite &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reportTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// and we need to store the reported name</span>
</span><span class='line'>    <span class="nx">testSuiteName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And all tests pass again. Although, we should notice this weird condition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">testSuiteName</span> <span class="o">===</span> <span class="s2">&quot;HelloWorld&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like our current production code is not generic enough, it will work well only with the <code>expectedName</code> equal to <code>"HelloWorld"</code>. Let&rsquo;s fix that by triangulating over this parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTestSuite_whenReporting_andFailingWithDifferentName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test suite &#39;OtherTestSuite&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="s2">&quot;HelloWorld&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;OtherTestSuite&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to throw an error,</span>
</span><span class='line'><span class="c1">// but nothing was thrown</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And we should fix it by actually using the `expectedName`:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">testSuiteName</span> <span class="o">===</span> <span class="nx">expectedName</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">//               ^ fixed here ^</span>
</span><span class='line'>  <span class="s2">&quot;Expected test suite &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And all the tests pass. Now we can get back to our failing test for the <code>runTestSuite</code>:</p>

<h2>Implementing rendering of the name of the test suite</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">reporter</span><span class="o">:</span> <span class="nx">reporter</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To implement this, first we will need to accept <code>options</code> parameter with sane defaults:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We have to implement this, otherwise our test suite will fail</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">SimpleReporter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">reportTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After making the failing test pass and triangulating over the name of the test suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And all tests pass now. Unfortunately, this is the output that we see now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, empty lines. This is because <code>(function () {}).name</code> is equal to <code>""</code>. We need to give proper names to all our anonymous constructors for the test suites:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">RunTestSuiteTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">});</span>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">AssertEqualTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// .. and so on ..</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we should see the correct output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">AssertEqualTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AssertNotEqualTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AssertNotThrowTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AssertThrowTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AssertTrueTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">FizzBuzzKataTest</span>
</span><span class='line'>
</span><span class='line'><span class="p">..</span> <span class="nx">and</span> <span class="nx">so</span> <span class="nx">on</span> <span class="p">..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, now we would like to render the name of the executed test:</p>

<h2>Render the name of the executed test</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSomeTestName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSomeOtherTestName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">reporter</span><span class="o">:</span> <span class="nx">reporter</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testSomeTestName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testSomeOtherTestName&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course this fails, because we need to implement <code>assertHasReportedTest(name)</code> now for our <code>ReporterSpy</code>. Let&rsquo;s test-drive it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/ReporterSpyTest.js</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenFailing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test &#39;testName&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal</span>
</span><span class='line'><span class="c1">//   Expected test &#39;testName&#39; to be reported,</span>
</span><span class='line'><span class="c1">// but got:</span>
</span><span class='line'><span class="c1">//   reporter.assertHasReportedTest is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need to define assertHasReportedTest(name) method:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to throw an error,</span>
</span><span class='line'><span class="c1">// but nothing was thrown</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need to make it throw the expected error:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>    <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Expected test &#39;testName&#39; to be reported&quot;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the test passes. Message hard-codes `testName` -</span>
</span><span class='line'><span class="c1">// we should triangulate over it:</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenFailing_withDifferentName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test &#39;testDifferentName&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testDifferentName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal</span>
</span><span class='line'><span class="c1">//   Expected test &#39;testDifferentName&#39; to be reported,</span>
</span><span class='line'><span class="c1">// but got:</span>
</span><span class='line'><span class="c1">//   Expected test &#39;testName&#39; to be reported</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And to fix it:</span>
</span><span class='line'><span class="s2">&quot;Expected test &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Next test will force us to implement simple reportTest function:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenSucceeding</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertNotThrow</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: reporter.reportTest is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After fixing this and triangulating a bit, we get:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">testName</span> <span class="o">===</span> <span class="nx">expectedName</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected test &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reportTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">testName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finally we need ability to report multiple tests:</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenSucceeding_withMultipleReports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertNotThrow</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="s2">&quot;testOtherName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected not to throw error,</span>
</span><span class='line'><span class="c1">// but thrown &#39;Expected test &#39;testName&#39; to be reported&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And to implement this:</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">assertions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// we will store all reported names,</span>
</span><span class='line'>  <span class="c1">// initially no names are reported</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testNames</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">assertHasReportedTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>      <span class="c1">// check if expectedName was reported</span>
</span><span class='line'>      <span class="nx">testNames</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">expectedName</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Expected test &#39;&quot;</span> <span class="o">+</span> <span class="nx">expectedName</span> <span class="o">+</span> <span class="s2">&quot;&#39; to be reported&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reportTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// store the reported test name</span>
</span><span class='line'>    <span class="nx">testNames</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this does not pass our tests, because this test fails now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenReporting_andFailing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected test &#39;testName&#39; to be reported&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="s2">&quot;testOtherName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testName&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>After an investigation, it becomes clear, that this happens because we can not re-use <code>reporter</code> variable defined at the higher level since all tests share the same <code>testSuite</code> object at the moment. We will have to move the creation of the <code>reporter</code> variable inside of each test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenReporting_andFailing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertHasReportedTest_whenReporting_andFailing_withOtherName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReporterSpy</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .. and so on ..</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this makes all our tests pass.</p>

<h2>Stateless tests</h2>

<p>This is quite a noticeable problem, that our users can be frustrated with, so we probably should make it easy on them and allow such variables to be fresh for every test. This can be achieved quite easy if we were to create a new <code>testSuite</code> for each test. Let&rsquo;s write a simple test to show the problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/StatelessTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">StatelessTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">41</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">testItCanMutateVariable_andImmediatelyUseNewValue</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">answer</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">testItCanMutateVariableAgain_andGetTheSameResult</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">answer</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">// this fails as expected:</span>
</span><span class='line'>  <span class="c1">// Error: Expected to equal 42, but got: 43</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now let&rsquo;s implement it by creating the <code>testSuite</code> for every test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuitePrototype</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ^ we change this from `testSuite` to `testSuitePrototype`  ^</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// ^   and we create our testSuite every time here   ^</span>
</span><span class='line'>      <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="c1">// ^  and run test on it ^</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After doing this, we can move <code>var reporter = new ReporterSpy(t);</code> to the top level of the <code>ReporterSpyTest</code> suite again. And all the tests pass.</p>

<h2>Implementation of the rendering of the test name</h2>

<p>Finally, we need to make sure that the test suite, that we have written before will pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItOutputsNameOfTheTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="nx">TestSuiteName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testSomeTestName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testSomeOtherTestName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span><span class="nx">reporter</span><span class="o">:</span> <span class="nx">reporter</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;TestSuiteName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testSomeTestName&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTest</span><span class="p">(</span><span class="s2">&quot;testSomeOtherTestName&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected it fails with <code>Error: Expected test 'testSomeTestName' to be reported</code>. After fixing it and applying triangulation once, we would end up with the following implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js in runTestSuite function:</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">(</span><span class="nx">testName</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ^  here is our implementation  ^</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">SimpleReporter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="c1">// and we should not forget to implement it for real reporter</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reportTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;\t&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, it seems that both <code>ReporterSpy</code> and <code>SimpleReporter</code> are implementing the same Duck type - <code>Reporter</code>. What Duck Type is? - find out here: <a href="http://www.tddfellow.com/blog/2016/09/18/meet-duck-type/">Meet Duck Type</a>.</p>

<h2>Contract testing all Reporter duck types</h2>

<p>So we should test all our ducks that their public API don&rsquo;t get out of sync:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">TestingFramework</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">TestingFramework</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SimpleReporter</span> <span class="o">=</span> <span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">SimpleReporter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ReporterSpy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./ReporterSpy&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">IMPLEMENTATIONS</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">SimpleReporter</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ReporterSpy</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">IMPLEMENTATIONS</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ReporterImplementation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReporterImplementation</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testDefines_reportTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">reportTestSuite</span> <span class="o">=</span> <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">reportTestSuite</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">reportTestSuite</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testDefines_reportTest</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">reportTest</span> <span class="o">=</span> <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTest</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">reportTest</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">reportTest</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the tests pass. Unfortunately, the output regarding this test suite looks weird:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">testDefines_reportTestSuite</span>
</span><span class='line'>    <span class="nx">testDefines_reportTest</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">testDefines_reportTestSuite</span>
</span><span class='line'>    <span class="nx">testDefines_reportTest</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test suite name is empty. I think we need an ability to define a custom and dynamic test suite name:</p>

<h2>Custom name for the test suite</h2>

<p>We can achieve this by allowing any test suite to define special hook method, that will return its custom name, like <code>testSuite.getTestSuiteName()</code>. Let&rsquo;s write a test for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItCanHaveCustomNameOfTheTestSuite</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getTestSuiteName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;CustomNameOfTheTestSuite&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span><span class="nx">reporter</span><span class="o">:</span> <span class="nx">reporter</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">assertHasReportedTestSuite</span><span class="p">(</span><span class="s2">&quot;CustomNameOfTheTestSuite&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>After implementing it and triangulating over the name once the code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reporter</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">reporter</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">SimpleReporter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testSuitePrototype</span> <span class="o">=</span> <span class="nx">createTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">reporter</span><span class="p">.</span><span class="nx">reportTestSuite</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">getTestSuiteName</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ^ this is the function that we introduced here to make it pass ^</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getTestSuiteName</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">,</span> <span class="nx">testSuitePrototype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">testSuitePrototype</span><span class="p">.</span><span class="nx">getTestSuiteName</span><span class="p">)</span> <span class="o">!==</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">testSuiteConstructor</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">testSuitePrototype</span><span class="p">.</span><span class="nx">getTestSuiteName</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if we were to use this feature in our duck type tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">IMPLEMENTATIONS</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ReporterImplementation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getTestSuiteName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">ReporterImplementation</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;_ReporterTest&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we are getting the proper output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">SimpleReporter_ReporterTest</span>
</span><span class='line'>    <span class="nx">testDefines_reportTestSuite</span>
</span><span class='line'>    <span class="nx">testDefines_reportTest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReporterSpy_ReporterTest</span>
</span><span class='line'>    <span class="nx">testDefines_reportTestSuite</span>
</span><span class='line'>    <span class="nx">testDefines_reportTest</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bottom Line</h2>

<p>I think we are done with implementing our first simple reporter. Now we can see that the tests are actually executing and passing. The code can be found here: <a href="https://github.com/waterlink/BuildYourOwnTestingFrameworkPart4">https://github.com/waterlink/BuildYourOwnTestingFrameworkPart4</a></p>

<p>There is still a lot to go through. In a few next episodes we will:</p>

<ul>
<li>Make sure that first failure does not cause test suite to stop running;</li>
<li>Make sure the exit code is right;</li>
<li>Report OK and FAIL;</li>
<li>Output carefully formatted failures to the STDERR.</li>
</ul>


<p>Stay tuned!</p>

<h2>Thanks</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Stuck While Doing TDD. Part 3: Triangulation to the Rescue!]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/"/>
    <updated>2016-08-31T02:35:32+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue</id>
    <content type="html"><![CDATA[<p>Welcome back to the &ldquo;Getting Stuck While Doing TDD&rdquo; series. Today we are going to learn the Golden Rule of TDD and how to not get stuck while doing TDD.</p>

<h2>TL;DR</h2>

<ul>
<li>&ldquo;As tests get more specific, production code gets more generic&rdquo;.</li>
<li><code>RED</code> is as important as other in Red-Green-Refactor cycle. If next test does not fail, it is either: already implemented, or has to wait until a later time (until it will fail).</li>
<li><p>At its core the Triangulation Technique has the following idea:</p>

<p>After implementing one business rule (with Red-Green-Refactor) make sure to find all &ldquo;weirdnesses&rdquo; or non-generalities in the production code and one-by-one eliminate them by writing a test, that proves such non-generality, and then making it pass while removing non-generality. This is the third cycle of TDD - Mini Cycle.</p></li>
</ul>


<!--more-->


<p>This is a series of articles:</p>

<ol>
<li><a href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/">Part 1: Example</a></li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through/">Part 2: Buggy Code and Forcing Our Way Through</a></li>
<li>Part 3: Triangulation to the Rescue! (reading this)</li>
</ol>


<p>Shall we get started?</p>

<h2>Specific/Generic Rule of TDD</h2>

<blockquote><p>As tests get more specific, production code gets more generic.</p></blockquote>

<p>When making the next failing test pass, our production code should also pass a whole class of similar tests. Best shown in the very simple example. The task at hand is to write the function <code>sum(a, b)</code> that will add two numbers. Let&rsquo;s see us a violation of the Specific/Generic rule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `sum&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; expected: 4, got: nil</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">4</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected: 5, got: 4</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>    <span class="mi">4</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>The production code to make this last test pass is as specific as the failing test now. The test of the same class (where we change the value of the <code>b</code> parameter) will fail for it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">44</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected: 44, got: 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>To follow the Specific/Generic rule we ought to make <code>4</code> into <code>2 + b</code> like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, when we change <code>b</code> to any value it will still pass the test, aside from the fact, that we didn&rsquo;t do anything about <code>a</code>. This is because we still don&rsquo;t have any test showing us, that parameter <code>a</code> is important, like the following one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected: 11, got: 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again we can make it pass in a very specific fashion by introducing specific <code>if</code> statement, or we could do it to pass the whole class of such tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have you noticed, that from the test suite side we had to &ldquo;prove&rdquo; that some knowledge in the system is important and had to be used? This technique is called Triangulation.</p>

<div class="v2-subscribe--inline">
  




  


<div class="mc_embed_signup">
  <form action="//tddfellow.us14.list-manage.com/subscribe/post?u=535a10a8c0274c9a7ebac4f34&amp;id=7f9f94015a" method="post" class="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div class="mc_embed_signup_scroll">
      <h3>Want more articles like this delivered to your inbox?</h3>
      <div class="mc-field-group">
        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_535a10a8c0274c9a7ebac4f34_7f9f94015a" tabindex="-1" value=""></div>
        <input type="email" value="" name="EMAIL" class="required email mce-EMAIL" placeholder="Enter your email">
        <input type="submit" value="Subscribe" name="subscribe" class="button mc-embedded-subscribe">
      </div>
      <div class="">
        <em>(we respect your privacy, unsubscribe at any time)</em>
      </div>
    </div>
  </form>
</div>


</div>


<h2>Triangulation Technique</h2>

<p>In the essence, Triangulation technique has a very simple idea at its core:</p>

<ol>
<li>Change certain important* knowledge in the system.</li>
<li>Assert that the production code behaves in an accordingly expected manner.</li>
</ol>


<p><em>* - important from the perspective of the system or unit under the test</em></p>

<h2>Red-Green-Refactor has to have all stages</h2>

<p>One Red-Green-Refactor cycle really has to have all stages in it. And I&rsquo;m not ranting right now about &ldquo;Refactor&rdquo; stage, that is a given. Rather, I insist on the &ldquo;Red&rdquo; stage - in TDD, when we write a new test, it has to fail. Writing tests that do not fail is another way to get ourselves stuck while doing TDD. One could ask: &ldquo;If I can&rsquo;t write this test because it does not fail, what should I do about the requirement it represents?&rdquo;, and the answer is rather simple - either this requirement is already implemented and tested by other tests, or we still need this test and we will get back to it later when it actually will fail.</p>

<p>As we can remember, in the first part of these series, we were going through an <code>OrderKindValidator</code> example, and we were writing multiple tests in a row, that were all expecting the same outcome and of course they didn&rsquo;t fail, because we had one line in our function that made them all pass. If we were to sprinkle some other tests, that do fail (like a test for a valid order kind), after making it pass, all of these tests will now be failing and therefore they are good candidates for our next test. Let&rsquo;s see it with our own eyes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is_absent</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;NoMethodError:</span>
</span><span class='line'><span class="c1"># =&gt;      undefined method `validate&#39; for #&lt;OrderKindValidator:0x000000020335c0&gt;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OrderKindValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now is the point, where we have to choose our next test, and last time we have chosen the test with the same outcome and it did not go so well. Let&rsquo;s choose a test with different outcome, e.g.: when valid order kind is provided:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we have 2 options, to either check for <code>order[:kind] == %w(private)</code> or to check for <code>order[:kind]</code> being absent. It does not matter what we choose at this point, so let&rsquo;s go with the first one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">==</span> <span class="sx">%w(private)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s apply Triangulation technique. We should always ask ourselves the question: &ldquo;What is weird about this code?&rdquo; and &ldquo;What failing test should I write to point out this weirdness?&rdquo;. First weirdness we can spot is that the validator currently accepts only one order kind - <code>private</code>. According to our requirements it should also accept <code>corporate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(corporate)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(private)</span> <span class="o">||</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(corporate)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also know, that our system should handle duplicate entries in <code>order[:kind]</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private private)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(corporate)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;NoMethodError: undefined method `include?&#39;</span>
</span><span class='line'><span class="c1"># =&gt; for nil:NilClass&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow! We, of course, can check for <code>kinds</code> to not be <code>nil</code>, but I would rather listen to this test failure and put a check for <code>kinds</code> being absent (and this makes for our second check, that we could have chosen from):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(corporate)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this passes all our tests. It may look weird, and this is exactly the pointer for us which test to write next to prove, that this weirdness is incorrect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(invalid)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Production code starts looking not so clean and I think it is time to give things proper names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OrderKindValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="n">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(corporate)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kinds</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fail_with</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="p">,</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is only one weirdness, that is left for triangulation in current production code, before we can move on to the next requirement - <code>private</code> can be duplicated while <code>corporate</code> can not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(corporate corporate)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, now we can safely go back to our empty order kind edge cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="o">[</span><span class="kp">nil</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span><span class='line'>
</span><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">nil?</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it is a good opportunity to eliminate some duplication:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">empty_value?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">empty_value?</span><span class="p">(</span><span class="n">kinds</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">empty_value?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">value</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, it is a good time to triangulate, because we have a weirdness in our code: <code>kinds[0]</code>. To prove that this is too specific we can write another test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind can not be empty&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">empty_value?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span> <span class="n">empty_value?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice, how every single test that we have written was failing and how easy it was to make it pass. This suggests that we are probably moving in the right direction. Let&rsquo;s test our next requirement - we can combine <code>private</code> and <code>bundle</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private bundle)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait a minute. This is really bad. We should have a failing test here. This happened because we are checking only for the inclusion of <code>private</code> or <code>corporate</code> and we do not care about anything else in the <code>order[:kind]</code> array. We have to discard this test and try to go with failing version of the same business rule - invalid order kind can not be combined with <code>private</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private invalid)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;invalid&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this works, it leads to two other weirdnesses: <code>kinds[1]</code> and <code>"invalid"</code>, let&rsquo;s the latter first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private another_invalid)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="s2">&quot;private&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span><span class='line'><span class="c1"># .. and more failures ..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Other tests fail now, from them it is possible to see, that second kind should be either <code>private</code> or <code>corporate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="s2">&quot;private&quot;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="s2">&quot;corporate&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks rather clunky, we should make it a bit cleaner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ALLOWED_ORDER_KINDS</span> <span class="o">=</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="o">!</span><span class="no">ALLOWED_ORDER_KINDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">kinds</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s eliminate the other weirdness - <code>kinds[1]</code>, it probably should verify all kinds in the array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(invalid private)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">kinds</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span>
</span><span class='line'>    <span class="o">!</span><span class="no">ALLOWED_ORDER_KINDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now this can be greatly simplified by inverting the boolean logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span>
</span><span class='line'>    <span class="no">ALLOWED_ORDER_KINDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have dealt with all weirdnesses in our production code, let&rsquo;s get back to our requirement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private bundle)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected no Exception,</span>
</span><span class='line'><span class="c1"># =&gt; got #&lt;InvalidOrderError: Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow! Now it fails exactly as it should. This means that it is now the right time for this test! Let&rsquo;s make it pass by adding <code>bundle</code> to the list of allowed order kinds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ALLOWED_ORDER_KINDS</span> <span class="o">=</span> <span class="sx">%w(private corporate bundle)</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice! Our next requirement is about <code>bundle</code> not being used on its own, i.e.: either <code>private</code> or <code>corporate</code> is required:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(bundle)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError with &quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(bundle)</span>
</span><span class='line'>    <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is good enough, because that is really the only case, when this can happen until the list of allowed order kinds is extended by future business requirements. We should at least give this condition a proper name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">unless</span> <span class="n">has_required?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_required?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">!=</span> <span class="sx">%w(bundle)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except, that we could provide duplicated <code>bundle</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(bundle bundle)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_required?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Easy to fix if we de-duplicate it with #uniq:</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">uniq</span> <span class="o">!=</span> <span class="sx">%w(bundle)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it is time to move on to the final requirement about conflicts between <code>private</code> and <code>corporate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(private corporate)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">kinds</span> <span class="o">==</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'>    <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, <code>kinds == %w(private corporate)</code> can be considered too specific for production code, we should triangulate it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">when_order_kind_is</span><span class="p">(</span><span class="sx">%w(corporate private)</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; expected InvalidOrderError</span>
</span><span class='line'><span class="c1"># =&gt; with &quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span>
</span><span class='line'><span class="c1"># =&gt; but nothing was raised</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, finally, let&rsquo;s give this condition a proper name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">has_conflicts?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_conflicts?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;private&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="n">kinds</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;corporate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I believe we are done now. Source for this example can be found in <a href="https://github.com/waterlink/order_kind_validator/pull/3">an open pull request here</a>.</p>

<p>Let&rsquo;s recap how Triangulation technique worked for us here.</p>

<h2>Triangulation Technique in Depth</h2>

<p>The main goal of triangulation is to prove that the code is not general enough along some axis (class of tests) by writing a test and then making sure it passes. Effective application of the technique requires to prove and eliminate all such &ldquo;weirdnesses&rdquo; or non-generalities from the production code after each Red-Green-Refactor cycle for business requirements. This is, in fact, the 3rd cycle of Test-Driven-Development called Mini Cycle of TDD, it should be executed about every 10 minutes.</p>

<p>Another observation is that following this technique we are introducing only one small piece of knowledge into our production code, for example:</p>

<ul>
<li>When writing a test for next business requirement, we are introducing the fact that we need an <code>if</code> statement with a certain body (in this example it was a <code>raise error</code> statement). Since we can not introduce the <code>if</code> statement without a condition we need to put some condition there and we put a very specific condition on purpose since we know that it is tested and it is simple.</li>
<li>Next, we are proving that this condition is too specific by writing a test, and then making it pass with a more generic solution. This way we are introducing a tiny little bit more knowledge in our production code.</li>
<li>We are repeating this iterative process until the production code is generic enough for the current specification (test suite). And we start over. This is the Mini Cycle of TDD.</li>
</ul>


<h2>Bottom Line</h2>

<p>Today we have learned the Golden Rule of TDD - &ldquo;As tests get more specific, production code gets more generic&rdquo;, and we have learned the Triangulation Technique, that allows us to follow this rule in an incremental and confident way. Additionally, we have learned, that following Red-Green-Refactor strictly is important, and this includes even the <code>RED</code> stage of this cycle - when the test for business requirement does not fail, it is either: already implemented or it has to wait for later.</p>

<p>This is a series of articles:</p>

<ol>
<li><a href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/">Part 1: Example</a></li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through/">Part 2: Buggy Code and Forcing Our Way Through</a></li>
<li>Part 3: Triangulation to the Rescue! (reading this)</li>
</ol>


<p>You would not want to miss next articles on this tech blog, we still have a lot to talk about:</p>

<ul>
<li>Continuous Integration and Continuous Delivery - importance of not impeding others,</li>
<li>Open-Closed Principle - changing behavior by adding new code,</li>
<li>Mutational Testing, &ldquo;Build Your Own Testing Framework&rdquo; series, 4 Cycles of TDD, Test-Driven Development screencasts and so much more!</li>
</ul>


<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Stuck While Doing TDD. Part 2: Buggy Code and Forcing Our Way Through]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through/"/>
    <updated>2016-08-31T02:35:06+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through</id>
    <content type="html"><![CDATA[<p>Welcome back to the &ldquo;Getting Stuck While Doing TDD&rdquo; series. Today we are going to see the results of getting stuck while doing TDD and scratch the surface of how to avoid this outcome.</p>

<p>Code examples today will be in Ruby programming language. The technique itself is, of course, language-agnostic.</p>

<h2>TL;DR</h2>

<ul>
<li>It is painful and difficult to force your way through when getting stuck in TDD.</li>
<li>It results in degraded guarantees from TDD (such as test coverage, semantical stability, and confidence).</li>
</ul>


<p>Ways to avoid this outcome:</p>

<ul>
<li>do not write tests that will not fail with the current production code</li>
<li>choose next test to write that will address particular detail about production code that is wrong or not general enough (Triangulation)</li>
</ul>


<p>Finally, do not forget to remove redundant tests if any.</p>

<!--more-->


<p>This is a series of articles:</p>

<ol>
<li><a href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/">Part 1: Example</a></li>
<li>Part 2: Buggy Code and Forcing Our Way Through (reading this)</li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/">Part 3: Triangulation to the Rescue!</a></li>
</ol>


<h2>Buggy if-riddled code</h2>

<p>Buggy <code>if</code>-riddled code is what we&rsquo;ve got. It is even not so easy to read. While we can refactor it to be more readable that won&rsquo;t change the presence of bugs, though. Let&rsquo;s still do it to understand what happens in this code better:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OrderKindValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">validate_only_known</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">validate_has_required</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">validate_no_conflicting</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">validate_non_empty</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_non_empty</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_no_conflicting</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">has_conflicting</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_has_required</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">has_no_required</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_only_known</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">invalid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">kind</span> <span class="o">!=</span> <span class="sx">%w(private bundle)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">kind</span> <span class="o">!=</span> <span class="sx">%w(corporate bundle)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_conflicting</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kind</span> <span class="o">==</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_no_required</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invalid?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fail_with</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Structure of the class, actually, sounds just right, but conditions are not good:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kind</span> <span class="o">!=</span> <span class="sx">%w(private bundle)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kind</span> <span class="o">!=</span> <span class="sx">%w(corporate bundle)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Really? It does not do what it says. At all. It basically just solves the problem very specifically to the tests. I can easily come up with a test that will break it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;almost anything&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Error: expected InvalidOrderError with</span>
</span><span class='line'><span class="c1">#    &quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;,</span>
</span><span class='line'><span class="c1"># got #&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or other test</span>
</span><span class='line'><span class="n">it_does_not_fail</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(corporate corporate)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_conflicting</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kind</span> <span class="o">==</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This at least does what it says. But only for one specific case, instead of general one. One test that I can come up with right away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(private corporate bundle)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># and another one:</span>
</span><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(corporate private)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_no_required</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this may work for our current requirements, it is really confusing for the reader. Method name says: &ldquo;has no required kind&rdquo; while method body checks if it is only <code>bundle</code>. And it does not work well with that edge case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(bundle bundle)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this case is quite unlikely, nothing in business rules forbid that and some other part of the system may as well duplicate <code>bundle</code> kind for some reason or it may be a user input mistake.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">invalid?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method, indeed, checks that <code>kind</code> is <code>invalid</code>. Literally <code>"invalid"</code>. Which would mean, that all kinds except exactly <code>"invalid"</code> are allowed. This is not true according to our business rules. In fact, we have already written the failing test for this some moments ago:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;almost anything&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s comment out these failing tests and try to force-TDD our way through these bugs by uncommenting and fixing them one-by-one following Red-Green-Refactor loop:</p>

<h2>Forcing our way through</h2>

<p>So, let&rsquo;s uncomment our first failing test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;almost anything&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are expecting <code>validate_only_known</code> to fail with its message and that means <code>invalid?(kinds)</code> should return true. To make it return <code>true</code> in this case and preserve its old behavior we will need to remove <code>private</code>, <code>corporate</code> and <code>bundle</code> from <code>kinds</code> and check that it is not empty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">invalid?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">kinds</span> <span class="o">-</span> <span class="sx">%w(private corporate bundle)</span><span class="p">)</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how we had to write the whole thing in one go. There is no chance to write it incrementally because there will be a bunch of tests that fail. Wait! While it does not fail for any tests related to invalid kinds, it fails for all tests related to emptiness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OrderKindValidator</span>
</span><span class='line'>  <span class="n">fails</span> <span class="n">with</span> <span class="n">message</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="n">absent</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="kp">nil</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we need to change more production code to make this one tiny test pass. It looks like <code>validate_non_empty</code> is a culprit now - it is being called after <code>validate_only_known</code>. It should be the other way around:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate_non_empty</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'><span class="c1"># ^ we moved this up here ^</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate_only_known</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">validate_has_required</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">validate_no_conflicting</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh! Now a bunch of other tests fails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OrderKindValidator</span>
</span><span class='line'>  <span class="n">fails</span> <span class="n">with</span> <span class="n">message</span> <span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fails</span> <span class="n">with</span> <span class="n">a</span> <span class="n">message</span> <span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fails</span> <span class="n">with</span> <span class="n">a</span> <span class="n">message</span> <span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;almost anything&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From failure messages it is possible to guess, that the culprit is <code>empty?(kinds)</code> function that fails in too much cases now, such as: <code>["bundle"]</code>, <code>["private", "corporate"]</code>, <code>["almost anything"]</code> and <code>["invalid"]</code>. This is because it was not doing what it said it was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">kinds</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">kinds</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kinds</span> <span class="o">!=</span> <span class="sx">%w(private bundle)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">kinds</span> <span class="o">!=</span> <span class="sx">%w(corporate bundle)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is why it was hard to change the order of validations. We will have to completely rewrite this function. Let&rsquo;s start small and see which tests fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The failures are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OrderKindValidator</span>
</span><span class='line'>  <span class="n">fails</span> <span class="n">with</span> <span class="n">message</span> <span class="s2">&quot;Order kind can not be empty&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="kp">nil</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="kp">nil</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="n">absent</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">order</span> <span class="n">kind</span> <span class="n">is</span> <span class="o">[]</span> <span class="p">(</span><span class="no">FAILED</span> <span class="o">-</span> <span class="mi">9</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good, only tests related directly to this case are failing. So one-by-one we can construct our condition while fixing these test failures:</p>

<ol>
<li><code>kinds.nil?</code></li>
<li><code>|| kinds.empty?</code></li>
<li><code>|| kinds[0].nil?</code>   (turned out to be redundant in the end)</li>
<li><code>|| kinds[0].empty?</code> (turned out to be redundant in the end)</li>
<li><code>|| kinds.any? { |k| k.nil? || k.empty? }</code></li>
</ol>


<p>After refactoring <code>empty?</code> the function now is looking this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">absent_or_empty?</span><span class="p">(</span><span class="n">kinds</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">kinds</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span> <span class="n">absent_or_empty?</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">absent_or_empty?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">value</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And all tests, finally, pass. It took a lot of effort and re-writing to get this one little test to pass. This is what we call &ldquo;Getting Stuck&rdquo; in TDD. There is always an order of tests that will lead to this result almost for any somewhat complex problem.</p>

<p>The code can be found in GitHub repository in <a href="https://github.com/waterlink/order_kind_validator/pull/2/files">an open pull request here</a>.</p>

<p>Almost guaranteed ways to get stuck in TDD:</p>

<ul>
<li>write tests that do not fail,</li>
<li>do not address weird results of &ldquo;simplest thing that could possibly work&rdquo; to make the test pass and moving on to the next business rule,</li>
<li>make production code a mirror of the tests and too specific, not general.</li>
</ul>


<p>And to not get stuck is to do the opposite:</p>

<ul>
<li>do not write the test that will not fail (wait until later, when it will fail), and</li>
<li>always first write the test that will point out next deficiency in the current production code (in TDD this is called Triangulation), and</li>
<li>while making some failing test pass, make sure that the change in production code covers not only this one specific test, rather, a whole class of tests (Golden Rule of TDD: As tests get more specific, production code gets more generic).</li>
</ul>


<h2>Bottom Line</h2>

<p>Today we have seen how bad the results of getting stuck while doing TDD can be. In the next article of these series, we will explore Golden Rule of TDD and the technique called Triangulation, that allows us to incrementally test-drive code in a way, that it will always be conforming to the Golden Rule of TDD and therefore will never get us stuck. Stay tuned!</p>

<p>This is a series of articles:</p>

<ol>
<li><a href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/">Part 1: Example</a></li>
<li>Part 2: Buggy Code and Forcing Our Way Through (reading this)</li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/">Part 3: Triangulation to the Rescue!</a></li>
</ol>


<p>You would not want to miss next articles on this tech blog, we still have a lot to talk about:</p>

<ul>
<li>Triangulation technique in Test-Driven Development - overlooking this technique might cause one fail at doing TDD (these series),</li>
<li>Continuous Integration and Continuous Delivery - importance of not impeding others,</li>
<li>Open-Closed Principle - changing behavior by adding new code,</li>
<li>Mutational Testing, &ldquo;Build Your Own Testing Framework&rdquo; series, Test-Driven Development screencasts and so much more!</li>
</ul>


<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Stuck While Doing TDD. Part 1: Example]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example/"/>
    <updated>2016-08-30T15:27:30+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/30/getting-stuck-while-doing-tdd-part-1-example</id>
    <content type="html"><![CDATA[<p>Following 3 rules of TDD sounds really simple at first. In practice, there is a moment when one has to implement the whole algorithm at once to make currently failing test pass. This is called &ldquo;getting stuck&rdquo; in TDD. In this article, we will explore how exactly this happens and how to prevent that.</p>

<p>Code examples today will be in Ruby programming language. The technique itself is, of course, language-agnostic.</p>

<h2>TL;DR</h2>

<p>&ldquo;Getting stuck&rdquo; happens for a couple of reasons:</p>

<ul>
<li>wrong order of tests</li>
<li>production code is not getting more general with each test</li>
</ul>


<!--more-->


<p>This is a series of articles:</p>

<ol>
<li>Part 1: Example (reading this)</li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through/">Part 2: Buggy Code and Forcing Our Way Through</a></li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/">Part 3: Triangulation to the Rescue!</a></li>
</ol>


<h2>&ldquo;Getting Stuck&rdquo; in TDD</h2>

<p>Usually &ldquo;Getting Stuck&rdquo; follows this pattern:</p>

<ul>
<li>write some test and implement it via &ldquo;simplest thing that might possibly work&rdquo;,</li>
<li>write another test and implement it again in a non-general manner,</li>
<li>write some more tests in that fashion, while never addressing the fact that production code now looks completely wrong from what it should probably be looking like,</li>
<li>write a new test, that forces us to completely rewrite production code in a complete algorithm just to make it pass.</li>
</ul>


<p>This last step usually takes minutes to hours depending on the complexity of the problem at hand. Additionally, the first few tests are basically wasted time since they did not produce any bits of knowledge in the production code that persisted in production code in the end. Even worse, chances are that the algorithm that we have just written is not fully covered by current tests, since we have written it in one go just to make current failing test pass - this is no longer correct TDD and can not guarantee high test coverage, and, therefore, can not guarantee high confidence anymore.</p>

<p>Let&rsquo;s go through a small example on how one can get stuck in TDD:</p>

<h2>Order Kind Validation - Getting Stuck</h2>

<p>Let&rsquo;s define the problem at hand first. We have some sort of order request as an input to our system and we need to validate that its kind is correct:</p>

<ul>
<li>valid order kinds: <code>private</code>, <code>corporate</code>, <code>bundle</code>,</li>
<li>order kinds can be combined,</li>
<li><code>private</code> and <code>corporate</code> order kinds can not be combined, otherwise <code>InvalidOrderError</code> with message <code>Order kind can not be 'private' and 'corporate' at the same time</code>,</li>
<li>either <code>private</code> or <code>corporate</code> should be always present, otherwise <code>InvalidOrderError</code> with message <code>Order kind should be 'private' or 'corporate'</code>,</li>
<li>if order kind is not in the above list, then we need to raise <code>InvalidOrderError</code> with message <code>Order kind can be one of: 'private', 'corporate', 'bundle'</code>,</li>
<li>if order kind is not present or an empty string, then we need to raise <code>InvalidOrderError</code> with message <code>Order kind can not be empty</code>.</li>
</ul>


<p>This is a fairly simple problem and it is easy to get stuck while doing TDD here. So let&rsquo;s write our first test: &ldquo;When order has no order_kind, then we should get InvalidOrderError with message &lsquo;Order kind can not be empty&rsquo;&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">OrderKindValidator</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;fails with a message about order kind being empty when it is absent&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">validator</span> <span class="o">=</span> <span class="no">OrderKindValidator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">({</span> <span class="ss">items</span><span class="p">:</span> <span class="mi">42</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the simplest implementation possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OrderKindValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">InvalidOrderError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next test is our next simplest edge case - when kind&rsquo;s value is <code>nil</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;fails with a message about order kind being empty when it is nil&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">validator</span> <span class="o">=</span> <span class="no">OrderKindValidator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">({</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="kp">nil</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does not fail at all, so we don&rsquo;t have any reason to change the production code. We can already spot a little duplication - <code>validator</code> variable. Let&rsquo;s extract it as a named subject of the test suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span><span class="p">(</span><span class="ss">:validator</span><span class="p">)</span> <span class="p">{</span> <span class="no">OrderKindValidator</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>OrderKindValidator</code> can be replaced with <code>described_class</code> (RSpec feature), so that we will not have to change too much in case we wanted to change name of the class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span><span class="p">(</span><span class="ss">:validator</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next simplest edge case - when kind is an empty array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;fails with a message about order kind being empty when it has zero elements&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">({</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="o">[]</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">InvalidOrderError</span><span class="p">,</span> <span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I believe I am spotting annoying pattern now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;fails with message MESSAGE when it is KIND_CASE&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">({</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="no">KIND_VALUE</span><span class="p">})</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">InvalidOrderError</span><span class="p">,</span> <span class="no">MESSAGE</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be really nice to write it in this fashion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">when_order_kind_is_absent</span>
</span><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as another duplication piles up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span> <span class="o">=</span> <span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is_absent</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the next tests look very easy and simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">it_fails_with_order_kind_not_empty</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And they all pass right from the go. The implementation for the <code>it_fails_with</code> is looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">OrderKindValidator</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ItFailsWith</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">expected_message</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@spec</span> <span class="o">=</span> <span class="n">spec</span>
</span><span class='line'>      <span class="vi">@expected_message</span> <span class="o">=</span> <span class="n">expected_message</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">when_order_kind_is_absent</span>
</span><span class='line'>      <span class="n">expect_failure</span><span class="p">(</span><span class="s2">&quot;absent&quot;</span><span class="p">,</span> <span class="p">{</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">when_order_kind_is</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect_failure</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">inspect</span><span class="p">,</span> <span class="p">{</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="n">value</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">expect_failure</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">,</span> <span class="n">expected_message</span> <span class="o">=</span> <span class="vi">@expected_message</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@spec</span><span class="o">.</span><span class="n">it</span><span class="p">(</span><span class="s2">&quot;fails with message </span><span class="si">#{</span><span class="n">expected_message</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> when order kind is </span><span class="si">#{</span><span class="n">feature</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">InvalidOrderError</span><span class="p">,</span> <span class="n">expected_message</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">it_fails_with</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="no">ItFailsWith</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s write our next edge case - when order kind is invalid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat! And oh, it fails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expected</span> <span class="no">InvalidOrderError</span> <span class="n">with</span>
</span><span class='line'>  <span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">got</span> <span class="c1">#&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>        <span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s write our next test - when order kind is <code>private</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fails as expected with <code>expected no Exception, got #&lt;InvalidOrderError: Order kind can not be empty&gt;</code>. And to make it pass we need to wrap second <code>raise</code> statement in the <code>if</code> condition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation for <code>it_does_not_fail</code> looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ItDoesNotFail</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">spec</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@spec</span> <span class="o">=</span> <span class="n">spec</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">when_order_kind_is</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@spec</span><span class="o">.</span><span class="n">it</span><span class="p">(</span><span class="s2">&quot;does not fail when order kind is </span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span> <span class="n">validator</span><span class="o">.</span><span class="n">validate</span><span class="p">({</span><span class="ss">items</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="n">value</span><span class="p">})</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">not_to</span> <span class="n">raise_error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">it_does_not_fail</span>
</span><span class='line'>  <span class="no">ItDoesNotFail</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s write our next test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it fails with the expected error: <code>expected no Exception, got #&lt;InvalidOrderError: Order kind can not be empty&gt;</code>. The fix is to amend our <code>if</code> condition with that case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span>
</span><span class='line'>                                <span class="c1"># ^  we have added this case  ^</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the tests pass. Our next business rule is that one of <code>private</code> and <code>corporate</code> should be always present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected the test fails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expected</span> <span class="no">InvalidOrderError</span> <span class="n">with</span>
</span><span class='line'>  <span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">got</span> <span class="c1">#&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to fix it we just need to sprinkle another <code>if</code> statement in the middle of the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, the test passes. Now we should test the next business rule - order can not be of <code>private</code> and <code>corporate</code> kind at the same time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_fails_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(private corporate)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, as expected, fails with error message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expected</span> <span class="no">InvalidOrderError</span> <span class="n">with</span>
</span><span class='line'>  <span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">got</span> <span class="c1">#&lt;InvalidOrderError: Order kind can not be empty&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And easiest way to fix that is to add another <code>if</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">==</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it passes. Let&rsquo;s test that we can combine <code>private</code> or <code>corporate</code> with <code>bundle</code> order kinds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(private bundle)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it fails with error: <code>expected no Exception, got #&lt;InvalidOrderError: Order kind can not be empty&gt;</code>. To fix this we will have to amend our last <code>if</code> condition in the function even more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span> <span class="o">!=</span> <span class="sx">%w(private bundle)</span>
</span><span class='line'>  <span class="c1"># ^    this is our new condition    ^</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test passes. Let&rsquo;s refactor the code a bit:</p>

<ul>
<li>First, we should extract <code>order[:kind]</code> duplication to a local variable <code>kind</code></li>
<li>Extract common parts of <code>raise</code> statement to the private method</li>
</ul>


<p>After this, <code>OrderKindValidator</code> will look a bit cleaner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OrderKindValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kind</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="ss">:kind</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;invalid&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can be one of: &#39;private&#39;, &#39;corporate&#39;, &#39;bundle&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;bundle&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind should be &#39;private&#39; or &#39;corporate&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sx">%w(private corporate)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be &#39;private&#39; and &#39;corporate&#39; at the same time&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;private&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">kind</span> <span class="o">!=</span> <span class="o">[</span><span class="s2">&quot;corporate&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">kind</span> <span class="o">!=</span> <span class="sx">%w(private bundle)</span>
</span><span class='line'>      <span class="n">fail_with</span><span class="p">(</span><span class="s2">&quot;Order kind can not be empty&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fail_with</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">InvalidOrderError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s write our next test for the same business rule (now a corporate bundle):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_does_not_fail</span><span class="o">.</span><span class="n">when_order_kind_is</span> <span class="sx">%w(corporate bundle)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it fails with error: <code>expected no Exception, got #&lt;InvalidOrderError: Order kind can not be empty&gt;</code>. To fix this we need to add <code>&amp;&amp; kind != %w(corporate bundle)</code> to our last <code>if</code> condition again.</p>

<p>The code can be found in GitHub repository in <a href="https://github.com/waterlink/order_kind_validator/pull/1/files">an open pull request here</a>.</p>

<p>Now it seems that we have implemented all the business rules (we have all tests for them). Or did we?</p>

<h2>Bottom Line</h2>

<p>Buggy <code>if</code>-riddled code is what we&rsquo;ve got. We will see why in the next part of &ldquo;Getting Stuck While Doing TDD&rdquo; series. Stay tuned!</p>

<p>This is a series of articles:</p>

<ol>
<li>Part 1: Example (reading this)</li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-2-buggy-code-and-forcing-our-way-through/">Part 2: Buggy Code and Forcing Our Way Through</a></li>
<li><a href="http://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/">Part 3: Triangulation to the Rescue!</a></li>
</ol>


<p>Today we have implemented our not-so-complex problem at hand while following 3 rules of TDD. The result was not of the best quality and we will take a look why in further articles of these series. You would not want to miss next articles on this tech blog, we still have a lot to talk about:</p>

<ul>
<li>Triangulation technique in Test-Driven Development - overlooking this technique might cause one fail at doing TDD (these series),</li>
<li>Continuous Integration and Continuous Delivery - importance of not impeding others,</li>
<li>Open-Closed Principle - changing behavior by adding new code,</li>
<li>Mutational Testing, &ldquo;Build Your Own Testing Framework&rdquo; series, Test-Driven Development screencasts and so much more!</li>
</ul>


<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eliminating 'if' Statements: Legacy Endpoint Primer]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/20/eliminating-if-statements-legacy-endpoint-primer/"/>
    <updated>2016-08-20T11:59:37+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/20/eliminating-if-statements-legacy-endpoint-primer</id>
    <content type="html"><![CDATA[<p><code>if</code> statements tend to duplicate throughout the code base. This may lead to subtle mistakes and bugs. One way to avoid that problem is to eliminate <code>if</code> statement completely. Today we are going to take a look at one example of such elimination. Code examples today will be in Kotlin.</p>

<!--more-->


<h2>Problem at hand</h2>

<ul>
<li>Our API has an endpoint for issuing some sort of <code>verification token</code> given <code>device id</code> and <code>phone number</code> of the user&rsquo;s mobile device.</li>
<li>We need to integrate these <code>verification tokens</code> with 3rd party API.</li>
<li>The format of <code>verification token</code> is fairly standardized.</li>
<li>After initial research, it turned out that <code>issuer</code> field of <code>verification token</code> has to be URL of the API that has issued that token and 3rd party API in question validates this fact.</li>
<li>Currently, <code>issuer</code> field gets generated as <code>com.tddfellow</code>. According to this standard, it has to be <code>https://tddfellow.com</code>.</li>
<li>Additionally, we have to support old versions of mobile clients for next 6 months, that are validating <code>issuer</code> to be <code>com.tddfellow</code>, we can not change them as they are already installed on users&#8217; mobile devices.</li>
</ul>


<p>Solution: bump the version of our API from <code>v1</code> to <code>v2</code> and use <code>v1</code> for integration with old mobile clients and use <code>v2</code> for integration with 3rd party API and all new clients.</p>

<h2>Current Relevant Code</h2>

<p>Main program, containing routing information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Main.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">secureTokenSource</span> <span class="p">=</span> <span class="n">SimpleSecureTokenSource</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">verificationTokenGateway</span> <span class="p">=</span> <span class="n">DummyVerificationTokenGateway</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">issueVerificationTokenUseCase</span> <span class="p">=</span> <span class="n">UseCase</span><span class="p">(</span><span class="n">secureTokenSource</span><span class="p">,</span> <span class="n">verificationTokenGateway</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">issueVerificationTokenEndpoint</span> <span class="p">=</span> <span class="n">Endpoint</span><span class="p">(</span><span class="n">issueVerificationTokenUseCase</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Spark</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">&quot;/api/v1/issueVerificationToken&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">issueVerificationTokenEndpoint</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>                <span class="n">deviceId</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;deviceId&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;phoneNumber&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Endpoint that issues verification token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// ApiEndpoints/IssueVerificationToken/Endpoint.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Endpoint</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">useCase</span><span class="p">:</span> <span class="n">UseCase</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">phoneNumber</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">IssueVerificationTokenEndpointResponse</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">issueVerificationToken</span> <span class="p">=</span> <span class="n">useCase</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">,</span> <span class="n">phoneNumber</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">IssueVerificationTokenEndpointResponse</span><span class="p">(</span>
</span><span class='line'>                <span class="n">issuer</span> <span class="p">=</span> <span class="n">issueVerificationToken</span><span class="p">.</span><span class="n">issuer</span><span class="p">,</span>
</span><span class='line'>                <span class="n">token</span> <span class="p">=</span> <span class="n">issueVerificationToken</span><span class="p">.</span><span class="n">secureToken</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the UseCase itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/UseCase.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="k">class</span> <span class="nc">UseCase</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">secureTokenSource</span><span class="p">:</span> <span class="n">SecureTokenSource</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">private</span> <span class="k">val</span> <span class="py">verificationTokenGateway</span><span class="p">:</span> <span class="n">VerificationTokenGateway</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">open</span> <span class="k">fun</span> <span class="nf">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">phoneNumber</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">VerificationToken</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">verificationToken</span> <span class="p">=</span> <span class="n">VerificationToken</span><span class="p">(</span>
</span><span class='line'>                <span class="n">issuer</span> <span class="p">=</span> <span class="s">&quot;com.tddfellow&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">deviceId</span> <span class="p">=</span> <span class="n">deviceId</span><span class="p">,</span>
</span><span class='line'>                <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span><span class="p">,</span>
</span><span class='line'>                <span class="n">secureToken</span> <span class="p">=</span> <span class="n">secureTokenSource</span><span class="p">.</span><span class="n">generateToken</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verificationTokenGateway</span><span class="p">.</span><span class="n">persist</span><span class="p">(</span><span class="n">verificationToken</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">verificationToken</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code can be found <a href="https://github.com/waterlink/LegacyEndpointPrimer/">here</a>.</p>

<h2>Solution With Awkward <code>if</code> Statement</h2>

<p>Easiest solution using passed in <code>apiVersion</code> from the <code>Main</code> program and switch on it being old or new in the use case to determine which issuer to generate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Main.kt</span>
</span><span class='line'>
</span><span class='line'><span class="n">Spark</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">&quot;/api/v1/issueVerificationToken&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">issueVerificationTokenEndpoint</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;deviceId&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;phoneNumber&quot;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here we are passing &quot;old&quot; version to the endpoint</span>
</span><span class='line'>            <span class="n">apiVersion</span> <span class="p">=</span> <span class="s">&quot;v1&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Spark</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">&quot;/api/v2/issueVerificationToken&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">issueVerificationTokenEndpoint</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;deviceId&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;phoneNumber&quot;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here we are passing &quot;new&quot; version to the endpoint</span>
</span><span class='line'>            <span class="n">apiVersion</span> <span class="p">=</span> <span class="s">&quot;v2&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the endpoint just passes this value through to the use case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// ApiEndpoints/IssueVerificationToken/Endpoint.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">phoneNumber</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">apiVersion</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">IssueVerificationTokenEndpointResponse</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">issueVerificationToken</span> <span class="p">=</span> <span class="n">useCase</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">deviceId</span><span class="p">,</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here we are passing API version through</span>
</span><span class='line'>            <span class="n">apiVersion</span> <span class="p">=</span> <span class="n">apiVersion</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">IssueVerificationTokenEndpointResponse</span><span class="p">(</span>
</span><span class='line'>            <span class="n">issuer</span> <span class="p">=</span> <span class="n">issueVerificationToken</span><span class="p">.</span><span class="n">issuer</span><span class="p">,</span>
</span><span class='line'>            <span class="n">token</span> <span class="p">=</span> <span class="n">issueVerificationToken</span><span class="p">.</span><span class="n">secureToken</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally the <code>if</code> statement in the use case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/UseCase.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">OLD_ISSUER</span> <span class="p">=</span> <span class="s">&quot;com.tddfellow&quot;</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">NEW_ISSUER</span> <span class="p">=</span> <span class="s">&quot;https://tddfellow.com&quot;</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">OLD_API_VERSION</span> <span class="p">=</span> <span class="s">&quot;v1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">phoneNumber</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">apiVersion</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">VerificationToken</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">verificationToken</span> <span class="p">=</span> <span class="n">VerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">issuer</span> <span class="p">=</span> <span class="n">getIssuerFor</span><span class="p">(</span><span class="n">apiVersion</span><span class="p">),</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">deviceId</span><span class="p">,</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span><span class="p">,</span>
</span><span class='line'>            <span class="n">secureToken</span> <span class="p">=</span> <span class="n">secureTokenSource</span><span class="p">.</span><span class="n">generateToken</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verificationTokenGateway</span><span class="p">.</span><span class="n">persist</span><span class="p">(</span><span class="n">verificationToken</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">verificationToken</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">getIssuerFor</span><span class="p">(</span><span class="n">apiVersion</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">apiVersion</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">OLD_API_VERSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">OLD_ISSUER</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NEW_ISSUER</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full code change available <a href="https://github.com/waterlink/LegacyEndpointPrimer/pull/1">here (via open Pull Request)</a>.</p>

<p>This solution has quite a few problems:</p>

<ul>
<li><code>if</code> statement smells a bit</li>
<li>use case probably should not have any knowledge of <code>apiVersion</code>, since APIs is not our domain, it is just a delivery mechanism</li>
</ul>


<p>If we were to pass some object, like <code>TokenIssuer</code>, it would probably be more appropriate to have use case know of it. Let&rsquo;s try to refactor:</p>

<h2>Refactoring <code>if</code> Statement Using Polymorphism</h2>

<p>First, let&rsquo;s start passing in the token issuer in the routing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Main.kt</span>
</span><span class='line'>
</span><span class='line'><span class="n">Spark</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">&quot;/api/v1/issueVerificationToken&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">issueVerificationTokenEndpoint</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;deviceId&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;phoneNumber&quot;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here we pass a specific object now for old token issuer:</span>
</span><span class='line'>            <span class="n">tokenIssuer</span> <span class="p">=</span> <span class="n">OldTokenIssuer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Spark</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">&quot;/api/v2/issueVerificationToken&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">issueVerificationTokenEndpoint</span><span class="p">.</span><span class="n">issueVerificationToken</span><span class="p">(</span>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;deviceId&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">queryParams</span><span class="p">(</span><span class="s">&quot;phoneNumber&quot;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here we pass an object that returns URL according to the standard</span>
</span><span class='line'>            <span class="n">tokenIssuer</span> <span class="p">=</span> <span class="n">UrlTokenIssuer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how <code>TokenIssuer</code> and its derivatives are looking like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/TokenIssuer.kt</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">TokenIssuer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getName</span><span class="p">():</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/OldTokenIssuer.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OldTokenIssuer</span> <span class="p">:</span> <span class="n">TokenIssuer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getName</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;com.tddfellow&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/UrlTokenIssuer.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UrlTokenIssuer</span> <span class="p">:</span> <span class="n">TokenIssuer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getName</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;https://tddfellow.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might guess, endpoint just passes this object through to the use case. And the use case itself just calls <code>getName()</code> on it when generating issuer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// IssueVerificationToken/UseCase.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">issueVerificationToken</span><span class="p">(</span><span class="n">deviceId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">phoneNumber</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">tokenIssuer</span><span class="p">:</span> <span class="n">TokenIssuer</span><span class="p">):</span> <span class="n">VerificationToken</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">verificationToken</span> <span class="p">=</span> <span class="n">VerificationToken</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// here is how much simpler it becomes</span>
</span><span class='line'>            <span class="n">issuer</span> <span class="p">=</span> <span class="n">tokenIssuer</span><span class="p">.</span><span class="n">getName</span><span class="p">(),</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">deviceId</span> <span class="p">=</span> <span class="n">deviceId</span><span class="p">,</span>
</span><span class='line'>            <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">phoneNumber</span><span class="p">,</span>
</span><span class='line'>            <span class="n">secureToken</span> <span class="p">=</span> <span class="n">secureTokenSource</span><span class="p">.</span><span class="n">generateToken</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verificationTokenGateway</span><span class="p">.</span><span class="n">persist</span><span class="p">(</span><span class="n">verificationToken</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">verificationToken</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Full code change can be seen <a href="https://github.com/waterlink/LegacyEndpointPrimer/pull/2">here (in the Pull Request)</a>.</p>

<h2>Bottom Line</h2>

<p>This code may be refactored further so that even <code>Endpoint</code> class will not have to know about <code>tokenIssuer</code> and pass it through. I will leave that as an exercise to you, my dear reader.</p>

<p>You would not want to miss next articles on this tech blog, we still have a lot to talk about:</p>

<ul>
<li>Continuous Integration and Continuous Delivery - importance of not impeding others,</li>
<li>Open-Closed Principle - changing behavior by adding new code,</li>
<li>Triangulation technique in Test-Driven Development - overlooking this technique might cause one fail at doing TDD,</li>
<li>Mutational Testing, &ldquo;Build Your Own Testing Framework&rdquo; series, Test-Driven Development screencasts and so much more!</li>
</ul>


<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Testing Framework. Part 3]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/14/build-your-own-testing-framework-part-3/"/>
    <updated>2016-08-14T13:55:17+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/14/build-your-own-testing-framework-part-3</id>
    <content type="html"><![CDATA[<p>Welcome back to the new issue of &ldquo;Build Your Own Testing Framework&rdquo; series! Today we are going to unit-test <code>runTestSuite</code> function of our testing framework. Currently, only its happy path is implicitly tested via every test of the system. Additionally, this function&rsquo;s unhappy paths are, in fact, untestable at the moment.</p>

<p>This article is the third one of the series &ldquo;Build Your Own Testing Framework&rdquo;, so make sure to stick around for next parts! All articles of these series can be found <a href="http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/">here</a>.</p>

<p>Shall we get started?</p>

<!--more-->


<h2>Testing existing code</h2>

<p>Let&rsquo;s take another look at the <code>runTestSuite</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuite</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function currently:</p>

<ol>
<li>Creates a new test suite from the passed in function-constructor.</li>
<li>Finds every method that starts with the string <code>test</code>.</li>
<li>And calls every such method.</li>
</ol>


<h3>Test that it calls at least one test method</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testItCallsOneTestMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">called</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">testSomeInterestingFunction</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this test passes. To be sure, that we are actually testing anything, let&rsquo;s make sure that <code>testSomeInterestingFunction</code> is not being called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="nx">testName</span> <span class="o">!=</span> <span class="s2">&quot;testSomeInterestingFunction&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//  ^   make sure our method is not called  ^</span>
</span><span class='line'>    <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fails as expected: <code>Error: Expected to be true, but got false</code>. Undoing this mutation causes the test to pass again. This is good, since we have seen this test fail when we expect it to fail. This proves the semantic stability of our test.</p>

<p>So, what will happen if we replace the whole <code>if</code> condition with <code>true</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, all tests will pass. Seems that we need to add a new test here:</p>

<h3>Test that it does not call non-test methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItDoesNotCallMethodThatDoesNotStartWithTestPrefix</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">called</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">someFunction</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="o">!</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this fails as expected. This makes our test suite semantically stable against this sort of mutation. Undoing the mutation should make the test suite pass. And it does.</p>

<p>There is another surviving mutant that I can come up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuite</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span> <span class="c1">// &lt;- surviving mutant</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means, that only first function will only ever run. Since all our tests are currently verifying that only one function is called or not we will need another test to defeat this mutant:</p>

<h3>Test that it calls all provided test methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItCallsAllTestMethods</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">calledOne</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">calledTwo</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">calledThree</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionOne</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">calledOne</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionTwo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">calledTwo</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionThree</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">calledThree</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">calledOne</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">calledTwo</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">calledThree</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Careful here: <code>testItCallsAllTestMethods</code> has to be the first test in the test suite for it to be ever called with the current mutation. As expected this test fails and undoing the mutation makes it pass.</p>

<p><code>testItCallsAllTestMethods</code> is superior to the <code>testItCallsOneTestMethod</code>, so we can remove the latter.</p>

<p>The amount of duplication in this code does not make me happy. Seems like we are missing the ability to verify if a certain function was called or not. Let&rsquo;s try to extract this abstraction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">spy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">that</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">that</span><span class="p">.</span><span class="nx">called</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the usage would look like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItCallsAllTestMethods</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spyOne</span> <span class="o">=</span> <span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spyTwo</span> <span class="o">=</span> <span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spyThree</span> <span class="o">=</span> <span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionOne</span> <span class="o">=</span> <span class="nx">spyOne</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionTwo</span> <span class="o">=</span> <span class="nx">spyTwo</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">testFunctionThree</span> <span class="o">=</span> <span class="nx">spyThree</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">spyOne</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">spyTwo</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">spyThree</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItDoesNotCallMethodThatDoesNotStartWithTestPrefix</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">aSpy</span> <span class="o">=</span> <span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">someFunction</span> <span class="o">=</span> <span class="nx">aSpy</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="o">!</span><span class="nx">aSpy</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing <code>assertions.spy()</code></h2>

<p>It seems, that having <code>t.spy()</code> available for the users of our testing framework might be very useful! Let&rsquo;s test-drive it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Initially, it should not be called</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testIsNotCalledInitially</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">().</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TypeError: t.spy is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Implementation in `assertions object`:</span>
</span><span class='line'><span class="nx">spy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">called</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Let&#39;s check that it can be called as a function</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testItCanBeCalledAsFunction</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">()();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TypeError: t.spy(...) is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplest implementation:</span>
</span><span class='line'><span class="nx">spy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Let&#39;s check that after being called it has correct `.called` value</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testIsCalledAfterBeingCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">aSpy</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">aSpy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">aSpy</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to be true, but got false</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And final implementation:</span>
</span><span class='line'><span class="nx">spy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="nx">that</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test <code>testItCanBeCalledAsFunction</code> is inferior to <code>testIsCalledAfterBeingCalled</code>, so we can remove it.</p>

<p>To make the assertion more fluent we might want to have <code>aSpy.assertCalled()</code> and <code>aSpy.assertNotCalled()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Let&#39;s replace our first test&#39;s `assertTrue(!...)` with `.assertNotCalled()`</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testIsNotCalledInitially</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">().</span><span class="nx">assertNotCalled</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TypeError: t.spy(...).assertNotCalled is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the stupid implementation:</span>
</span><span class='line'><span class="nx">spy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">that</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">that</span><span class="p">.</span><span class="nx">assertNotCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This needs some triangulation:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertNotCalledFailsWhenWasCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">aSpy</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">aSpy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected not to be called&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">aSpy</span><span class="p">.</span><span class="nx">assertNotCalled</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to throw an error, but nothing was thrown</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And to make it pass:</span>
</span><span class='line'><span class="nx">that</span><span class="p">.</span><span class="nx">assertNotCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="o">!</span><span class="nx">that</span><span class="p">.</span><span class="nx">called</span><span class="p">,</span> <span class="s2">&quot;Expected not to be called&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s do the same with the other test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Replace `assertTrue` in the second test with `assertCalled`:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testIsCalledAfterBeingCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">aSpy</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">aSpy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">aSpy</span><span class="p">.</span><span class="nx">assertCalled</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TypeError: aSpy.assertCalled is not a function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the stupid implementation:</span>
</span><span class='line'><span class="nx">that</span><span class="p">.</span><span class="nx">assertCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Let&#39;s triangulate it a bit:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAssertCalledFailsWhenWasNotCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to be called&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">spy</span><span class="p">().</span><span class="nx">assertCalled</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to throw an error, but nothing was thrown</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the implementation:</span>
</span><span class='line'><span class="nx">that</span><span class="p">.</span><span class="nx">assertCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">called</span><span class="p">,</span> <span class="s2">&quot;Expected to be called&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the full implementation of <code>spy()</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">spy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">that</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">that</span><span class="p">.</span><span class="nx">assertNotCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="o">!</span><span class="nx">that</span><span class="p">.</span><span class="nx">called</span><span class="p">,</span> <span class="s2">&quot;Expected not to be called&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">that</span><span class="p">.</span><span class="nx">assertCalled</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">called</span><span class="p">,</span> <span class="s2">&quot;Expected to be called&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bottom Line</h2>

<p>Today we have tested all the existing behavior of the <code>runTestSuite</code> function. That has driven us to implement very simple spies for our testing framework.</p>

<p>We have successfully applied manual Mutational Testing to the existing functionality to derive Semantically Stable tests for it. We did some Triangulation too today. Generally speaking, in TDD Triangulation technique is something that is used on a daily basis, when TDD is practiced properly. Future articles will expand on Triangulation, Mutational Testing, and Semantic Stability in more detail, so stay tuned!</p>

<p>There are only a few problems left, that bother me:</p>

<ul>
<li>We often do <code>t.assertTrue(!condition)</code>, seems that we lack <code>t.assertFalse(condition)</code> assertion.</li>
<li>We often call functions without any assertions to do an implicit assertion, that the call is not throwing any exception. This can be confusing: it is better to make that assertion explicitly - seems like we need <code>t.assertNotThrow</code>.</li>
<li>Seems that it is useful to have <code>NOT</code> version of every assertion. Even though we don&rsquo;t need <code>t.assertNotEqual</code> right now, from my experience with testing it is often very useful.</li>
</ul>


<p>Creating these assertions I will leave as an exercise to the reader. From now on, we will assume they are implemented and we will use them where appropriate. Code is available on GitHub: <a href="https://github.com/waterlink/BuildYourOwnTestingFrameworkPart3">https://github.com/waterlink/BuildYourOwnTestingFrameworkPart3</a></p>

<p>Next time we will add more requirements for our <code>runTestSuite</code> function, such as:</p>

<ul>
<li>Continue running tests after the first failure.</li>
<li>Report successfully passed tests.</li>
<li>Report failures.</li>
<li>Report test run stats (counts of successful and failed tests).</li>
<li>Avoid shared state between tests of the same test suite.</li>
</ul>


<p>Stay tuned!</p>

<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD #6: Continuous Integration Training]]></title>
    <link href="http://www.tddfellow.com/blog/2016/08/10/tdd-screencast-number-6-continuous-integration-training/"/>
    <updated>2016-08-10T19:35:41+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/08/10/tdd-screencast-number-6-continuous-integration-training</id>
    <content type="html"><![CDATA[<iframe src="https://player.vimeo.com/video/178357638" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/178357638">Test-Driven Development Screencast #6: Continuous Integration Training</a></p>

<p><em>(Recommended to watch full-screen and HD: 720p or more)</em></p>

<p>List of all TDD Screencasts can be <a href="http://www.tddfellow.com/blog/categories/tdd-screencasts/">found here</a>.</p>

<h2>Summary</h2>

<p>Today we are going to discuss Continuous Integration, what it is and what it isn&rsquo;t. We will define best Check-Out/Check-In cycle. We will explore ways to train our Continuous Integration skills. And we will do some live coding on Kata with special restriction, that allows one to train such skills. Then we will draw a bottom line.</p>

<p>Thanks for watching! If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Change Refactoring]]></title>
    <link href="http://www.tddfellow.com/blog/2016/07/31/parallel-change-refactoring/"/>
    <updated>2016-07-31T09:57:31+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/07/31/parallel-change-refactoring</id>
    <content type="html"><![CDATA[<p>Parallel Change is the refactoring technique, that allows implementing backward-incompatible changes to an API in a safe manner. It consists of 3 steps:</p>

<ul>
<li>Expand - add new functionality as an extension of the interface (e.g.: add new methods), instead of editing signatures of existing interfaces</li>
<li>Migrate - mark (or log a warning) existing interface as deprecated and give time to the clients of the interface to migrate to the new interface. This might be as simple as changing your own code-base one client of this interface at a time in case when you do not have 3rd party clients of these interfaces</li>
<li>Contract - once all clients have migrated remove old interfaces</li>
</ul>


<p>This technique is tremendously useful when you have 3rd party clients for your API (open-source library, SaaS with REST API, etc). Also, it is as useful for normal application development because it allows such breaking changes to never break your test suite. It allows deploying your code in the middle of the refactoring, in fact, every few minutes (Continuous Integration + Continuous Deployment).</p>

<p>This article contains code examples in a pseudo-code.</p>

<!--more-->


<h2><code>UserSearch</code></h2>

<p>Let&rsquo;s imagine, that we have some class, that is used to search <code>User</code> by id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">search</span><span class="p">(</span><span class="kt">id</span> <span class="o">:</span> <span class="n">UserId</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search ..</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, new requirement comes in and it seems, that we need to be able to search by e-mail too, so we have to add more functionality here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_email</span><span class="p">(</span><span class="nl">email</span> <span class="p">:</span> <span class="n">Email</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search ..</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later, new requirement comes in and now we need to be able to search by the nickname too. So we follow the pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_nickname</span><span class="p">(</span><span class="nl">nickname</span> <span class="p">:</span> <span class="n">Nickname</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search ..</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is great and all, but we clearly can see, how this class violates Open-Closed Principle: every time there is a new thing to search the user by, we will have to alter this class. This is not good. One of the possible solutions might be closing this class against this kind of change by introducing polymorphic <code>Query</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// all other search_* methods were removed</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search</span><span class="p">(</span><span class="nl">query</span> <span class="p">:</span> <span class="n">Query</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After doing that, if we run our test suite, it will be failing, probably, even with compile errors. This is not good because now we have to go through every failure and fix it, this will prevent us from continuously integrating for quite some time (half an hour, or a couple of days, depending on the impact of this change). And this has high chances of resulting in merge conflicts, that will impede work of others on our team.</p>

<p>Instead, let&rsquo;s apply the parallel change.</p>

<h2>Applying Parallel Change</h2>

<h3>Expand</h3>

<p>First, we need to introduce brand new method of our class (of course with unit-tests), without touching anything else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_query</span><span class="p">(</span><span class="nl">query</span> <span class="p">:</span> <span class="n">Query</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we are going to deploy this new code.</p>

<div class="v2-subscribe--inline">
  




  


<div class="mc_embed_signup">
  <form action="//tddfellow.us14.list-manage.com/subscribe/post?u=535a10a8c0274c9a7ebac4f34&amp;id=7f9f94015a" method="post" class="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div class="mc_embed_signup_scroll">
      <h3>Want more articles like this delivered to your inbox?</h3>
      <div class="mc-field-group">
        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_535a10a8c0274c9a7ebac4f34_7f9f94015a" tabindex="-1" value=""></div>
        <input type="email" value="" name="EMAIL" class="required email mce-EMAIL" placeholder="Enter your email">
        <input type="submit" value="Subscribe" name="subscribe" class="button mc-embedded-subscribe">
      </div>
      <div class="">
        <em>(we respect your privacy, unsubscribe at any time)</em>
      </div>
    </div>
  </form>
</div>


</div>


<h3>Migrate</h3>

<p>Second, we need to add a deprecation warning to old interface, and, in fact, old functions can be rewritten via new one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">search</span><span class="p">(</span><span class="kt">id</span> <span class="o">:</span> <span class="n">UserId</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">warn</span><span class="p">(</span><span class="s">&quot;`UserSearch.search` is deprecated. Use `UserSearch.search_by_query` instead&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">search_by_query</span><span class="p">(</span><span class="n">UserIdQuery</span><span class="p">(</span><span class="kt">id</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_email</span><span class="p">(</span><span class="nl">email</span> <span class="p">:</span> <span class="n">Email</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">warn</span><span class="p">(</span><span class="s">&quot;`UserSearch.search_by_email` is deprecated. Use `UserSearch.search_by_query` instead&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">search_by_query</span><span class="p">(</span><span class="n">UserEmailQuery</span><span class="p">(</span><span class="n">email</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_nickname</span><span class="p">(</span><span class="nl">nickname</span> <span class="p">:</span> <span class="n">Nickname</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">warn</span><span class="p">(</span><span class="s">&quot;`UserSearch.search_by_nickname` is deprecated. Use `UserSearch.search_by_query` instead&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">search_by_query</span><span class="p">(</span><span class="n">UserNicknameQuery</span><span class="p">(</span><span class="n">nickname</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we are going to deploy this new code.</p>

<p>Next, we need to:</p>

<ul>
<li>inform all clients of our system about this deprecation and give them time-frame to migrate, or</li>
<li>if all clients of <code>UserSearch</code> are under our control, we need to change all calls to use new interface:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// was: `user_search.search(user_id)`</span>
</span><span class='line'><span class="n">user_search</span><span class="p">.</span><span class="n">search_by_query</span><span class="p">(</span><span class="n">UserIdQuery</span><span class="p">(</span><span class="n">user_id</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>After every line of change like that (big system probably has a multitude of these) we are going to deploy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// was: `user_search.search_by_email(user_email)`</span>
</span><span class='line'><span class="n">user_search</span><span class="p">.</span><span class="n">search_by_query</span><span class="p">(</span><span class="n">UserEmailQuery</span><span class="p">(</span><span class="n">user_email</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>After every line of change like that we are going to deploy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// was: `user_search.search_by_nickname(user_nickname)`</span>
</span><span class='line'><span class="n">user_search</span><span class="p">.</span><span class="n">search_by_query</span><span class="p">(</span><span class="n">UserNicknameQuery</span><span class="p">(</span><span class="n">user_nickname</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, after each line we are going to deploy.</p>

<h3>Contract</h3>

<p>Once all our tests pass and there is no single deprecation warning from <code>UserSession</code>, or the time-frame we have given to our 3rd party clients is finished, we can remove old functionality by simply removing deprecated methods (and their unit-tests), and what we will have left is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UserSearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">search_by_query</span><span class="p">(</span><span class="nl">query</span> <span class="p">:</span> <span class="n">Query</span><span class="p">)</span><span class="o">:</span> <span class="p">[</span><span class="n">User</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. we somehow use the database gateway here to search</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we can deploy our system now.</p>

<h2>Bottom Line</h2>

<p>Notice, how following this technique avoids even a single compile error or test suite failure. And if failure happens, the last small code change (probably one line) was wrong, you just <code>CTRL+Z</code> it to get back to GREEN state.</p>

<p>Was that refactoring necessary? Oh yeah it was, because in next few weeks, there were new requirements that would have forced us to add 2 new <code>search_by_*</code> methods to <code>UserSearch</code> class - instead, we just created new derivatives of <code>Query</code> interface/protocol and used them in the places where they are needed. This way we were able to change how <code>UserSearch</code> class works without modifying its source code, by only adding new code. This is a great win.</p>

<p>You would not want to miss next articles on this tech blog, we still have a lot to talk about:</p>

<ul>
<li>Continuous Integration and Continuous Delivery - importance of not impeding others,</li>
<li>Open-Closed Principle - changing behavior by adding new code,</li>
<li>Triangulation technique in Test-Driven Development - overlooking this technique might cause one fail at doing TDD,</li>
<li>Mutational Testing, &ldquo;Build Your Own Testing Framework&rdquo; series and so much more!</li>
</ul>


<p>Stay tuned!</p>

<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Testing Framework. Part 2]]></title>
    <link href="http://www.tddfellow.com/blog/2016/07/23/build-your-own-testing-framework-part-2/"/>
    <updated>2016-07-23T14:52:42+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/07/23/build-your-own-testing-framework-part-2</id>
    <content type="html"><![CDATA[<p>Today we are going to unit-test existing functionality of our own testing framework, that we have test-driven with <code>FizzBuzzKata</code> in <a href="http://www.tddfellow.com/blog/2016/07/15/build-your-own-testing-framework/">the previous part</a>.</p>

<p>This needs to be done, since currently only happy paths are implicitly tested via <code>FizzBuzzKata</code> test suite, i.e.: when all the tests pass. The following unhappy paths are not tested at the moment:</p>

<ul>
<li>when <code>assertTrue</code> fails, it throws an error,</li>
<li>when <code>assertEqual</code> fails, it throws an error,</li>
<li>when the test fails, it renders the error and fails the whole test suite run, i.e.: non-zero exit code.</li>
</ul>


<p>This article is the second one of the series &ldquo;Build Your Own Testing Framework&rdquo;, so make sure to stick around for next parts! All articles of these series can be found here: <a href="http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/.">http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/.</a></p>

<p>Shall we get the ball rolling?</p>

<h2>Testing <code>assertTrue(condition, message)</code></h2>

<p>Let&rsquo;s create a test suite for <code>assertTrue</code> with the first test for the case, when <code>assertTrue</code> succeeds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertTrueTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run this test suite, it should not fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s check if that test actually is testing anything by trying to break the implementation of <code>assertTrue</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// &lt;- this condition was inverted</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(...);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run it, we get the expected error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">..</span> <span class="nx">stack</span> <span class="nx">trace</span> <span class="p">..</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, it fails as expected, now we should undo our breaking change in the implementation and run the test suite again and it should pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// &lt;- the breaking change here have been undone</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(...);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s write a new test for the case, when <code>assertTrue</code> fails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run the test suite, it passes. If I was confident in the previous test, that I know why it didn&rsquo;t fail, here I feel a bit uncomfortable about writing these 5 lines of test code and never seeing them fail. So let&rsquo;s break the code once again!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;oops&quot;</span><span class="p">);</span>   <span class="c1">// &lt;- we have changed error message here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run tests, we get an expected failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;oops&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="nx">oops</span>
</span><span class='line'>    <span class="p">..</span> <span class="nx">stack</span> <span class="nx">trace</span> <span class="p">..</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we undo our breaking change in the implementation the test should pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//                         ^ we have restored correct message ^</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the last test for <code>assertTrue</code> to test the custom failure message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;it is not true!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;it is not true!&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the test suite, it passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even that I am confident enough, that this <code>try { ... } catch (..) { ... }</code> construction does the right thing, let&rsquo;s be diligent about it and break the implementation of that functionality and see this test fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//              ^ &#39;message || &#39; was removed here   ^</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the test suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">..</span> <span class="nx">stack</span> <span class="nx">trace</span> <span class="p">..</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>It fails, but this change breaks <code>assertEqual</code> too so that we don&rsquo;t see any meaningful error message now. We can figure out if that is an expected failure or not by inspecting the stack trace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assertions</span><span class="p">.</span><span class="nx">assertTrue</span> <span class="p">(</span><span class="err">/path/to/project/src/TestingFramework.js:4:19)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assertions</span><span class="p">.</span><span class="nx">assertEqual</span> <span class="p">(</span><span class="err">/path/to/project/src/TestingFramework.js:9:14)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">testCustomFailureMessage</span> <span class="p">(</span><span class="err">/path/to/project/test/AssertTrueTest.js:20:15)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">runTestSuite</span> <span class="p">(</span><span class="err">/path/to/project/src/TestingFramework.js:21:32)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="err">/path/to/project/test/AssertTrueTest.js:3:1)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">409</span><span class="o">:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">..</span><span class="nx">js</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">416</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">343</span><span class="o">:</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">300</span><span class="o">:</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">runMain</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">441</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and precisely this line is the most interesting one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">at</span> <span class="nx">testCustomFailureMessage</span> <span class="p">(</span><span class="err">/path/to/project/test/AssertTrueTest.js:20:15)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we open the code at this stack trace frame, we will see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;it is not true!&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, this is exactly what we expected. Undoing the breaking change and running the test suite again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//              ^ &#39;message || &#39; was inserted here again       ^</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly enough, I know how to break the code now and all the tests will pass:</p>

<p>First, let&rsquo;s extract local variable in <code>assertTrue</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that still passes its tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s expand <code>message ||</code> into the proper <code>if</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that still passes its tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, what if I were to replace <code>errorMessage = message;</code> with <code>errorMessage = "it is not true!";</code> inside of the <code>if</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">&quot;it is not true!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test still passes!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is rather interesting. It seems, that we will have to make sure, that <code>message</code> parameter actually gets passed to <code>new Error(...)</code>. We can do that by applying the Triangulation technique focusing on <code>message</code> parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage_withOtherMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;should be true&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;should be true&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run the test suite, we get our expected failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">not</span> <span class="kc">true</span><span class="o">!</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">testCustomFailureMessage_withOtherMessage</span> <span class="p">(</span><span class="err">/path/to/project/test/AssertTrueTest.js:28:15)</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we look at the stack trace frame, it points us to the correct line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;should be true&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can now fix the test by fixing the implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// inside of `assertTrue` function:</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>   <span class="c1">// &lt;- here we actually have to use &#39;message&#39; now</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when we run the test suite, it passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we have all required tests for <code>assertTrue</code> now. This is great! And have you spotted the duplication already?</p>

<h2>Refactoring <code>AssertTrueTest</code></h2>

<p>The duplication that is present here is our <code>try { ... } catch (..) { ... }</code> construct. Let&rsquo;s make it a completely duplicate code by extracting couple of local variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// first, let&#39;s extract the Action Under the Test variable:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">action</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// next, let&#39;s extract the Expected Error Message:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">expectedMessage</span> <span class="o">=</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">action</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we apply the same refactoring for all tests in the <code>AssertTrueTest</code> suite, we will see the duplication:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">action</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s give that operation a name and extract is as a function: <code>assertThrow(expectedMessage, action)</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">assertThrow</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">action</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use this function in all tests and inline all the extracted local variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;it is not true!&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;it is not true!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage_withOtherMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;should be true&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;should be true&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function <code>assertThrow</code> seems to be useful for any test, not just <code>AssertTrueTest</code> suite. Let&rsquo;s move it to the <code>assertions</code> object. We will be doing that by using Parallel Change technique:</p>

<ol>
<li>Create new functionality first;</li>
<li>Step by step migrate all calls to use new functionality instead of old one;</li>
<li>Once old functionality is not used, remove it.</li>
</ol>


<p>The advantage of that method is that it consists of very small steps, that can be executed with confidence and each such small step never leaves the user in a red state (failing tests or compile/parsing errors).</p>

<p>Let&rsquo;s see how this one can be applied here:</p>

<p><code>1. Create new functionality first</code> - we can do it by copying the <code>assertThrow</code> function to <code>assertions</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="nx">assertThrow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">action</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// `t` needs to be changed to `this` here</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests should still pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>2. Step by step migrate all calls to use new functionality instead of old one</code> - we do it by calling <code>assertThrow</code> on <code>t</code> (our assertions object) in the test suite. Since we still haven&rsquo;t removed the old <code>assertThrow</code> function, we can do that one function call at the time and the tests will always be green:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// ^ &#39;t.&#39; added here ^</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run tests and they still pass.</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;it is not true!&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// ^ &#39;t.&#39; added here ^</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;it is not true!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run tests and they still pass.</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage_withOtherMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;should be true&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// ^ &#39;t.&#39; added here ^</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;should be true&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>3. Once old functionality is not used, remove it.</code> - now we can remove our <code>assertThrow</code> function defined inside of the <code>AssertTrueTest</code> suite and run tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertTrueTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>And they pass. Let&rsquo;s see the complete <code>AssertTrueTest</code> suite again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertTrueTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;it is not true!&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;it is not true!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testCustomFailureMessage_withOtherMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;should be true&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;should be true&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only problem here is that we are relying on the untested <code>assertThrow</code> assertion here. Let&rsquo;s unit-test it.</p>

<h2>Testing <code>assertThrow(expectedMessage, action)</code></h2>

<p>Let&rsquo;s create a new test suite with first test when <code>assertThrow</code> succeeds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertThrowTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test should pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code can be broken without test failure by not using <code>expectedMessage</code> parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertThrow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">action</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ^ here &#39;expectedMessage&#39; was changed to constant ^</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s triangulate the code to make sure <code>expectedMessage</code> is used correctly by adding a new test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testSuccess_withDifferentExpectedMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that test fails as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="nx">an</span> <span class="nx">error</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="nx">a</span> <span class="nx">different</span> <span class="nx">error</span> <span class="nx">message</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Undoing the breaking change (Mutation) will make the test pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next test is to make sure, that <code>assertThrow</code> is actually comparing actual and expected error messages correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal an error message, but got: a different error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it passes. The last test, that <code>assertThrow</code> needs is the case, when <code>action()</code> is not throwing any error. In that case <code>assertThrow</code> should fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure_whenActionDoesNotThrow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to throw an error, but nothing was thrown&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// does nothing</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, and that test is passing! We clearly don&rsquo;t have that functionality yet. We have to add another test without usage of outer <code>t.assertThrow</code> to make sure that we get a test failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testThrows_whenActionDoesNotThrow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// does nothing</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">hasThrown</span><span class="p">,</span> <span class="s2">&quot;it should have thrown&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run our tests we get the expected failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">it</span> <span class="nx">should</span> <span class="nx">have</span> <span class="nx">thrown</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can fix that by verifying, that <code>catch</code> block is executed in the <code>assertThrow</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertThrow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>  <span class="c1">// &lt;- we initialize hasThrown here</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">action</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>   <span class="c1">// &lt;- and we set it to true in the catch block</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">hasThrown</span><span class="p">);</span>  <span class="c1">// &lt;- and we check that it is true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now if we run the test suite, the original test that we were trying to write fails as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'><span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">TestingFramework</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">10</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="k">throw</span> <span class="nx">an</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">nothing</span> <span class="nx">was</span> <span class="nx">thrown</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to fix the custom message provided to <code>assertTrue</code> call inside of <code>assertThrow</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// inside of assertThrow:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">hasThrown</span><span class="p">,</span> <span class="s2">&quot;Expected to throw an error, but nothing was thrown&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/usr/local/bin/node AssertThrowTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Process</span> <span class="nx">finished</span> <span class="kd">with</span> <span class="nx">exit</span> <span class="nx">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, I think we are done with testing the <code>assertThrow</code> function. Let&rsquo;s see the whole <code>AssertThrowTest</code> suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertThrowTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess_withDifferentExpectedMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal an error message, but got: a different error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;a different error message&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testFailure_whenActionDoesNotThrow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to throw an error, but nothing was thrown&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// does nothing</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testThrows_whenActionDoesNotThrow</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;an error message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// does nothing</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">hasThrown</span><span class="p">,</span> <span class="s2">&quot;it should have thrown&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last one for today is <code>assertEqual</code>:</p>

<h2>Testing <code>assertEqual(expected, actual)</code></h2>

<p>Let&rsquo;s create a test suite with the first test, when <code>assertEqual</code> succeeds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertEqualTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test passes, and it can be broken without test failure by always comparing to <code>42</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertEqual</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>        <span class="mi">42</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>   <span class="c1">// &lt;- here &#39;expected&#39; is replaced with constant</span>
</span><span class='line'>        <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Triangulation to fix that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testSuccess_whenExpectedIsDifferent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal 29, but got: 29</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fix implementation:</span>
</span><span class='line'><span class="nx">expected</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>   <span class="c1">// &lt;- here &#39;expected&#39; is restored</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and the test passes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next mutation that does not break any tests looks this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertEqual</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">expected</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// &quot;Expected to equal &quot; + expected + &quot;, but got: &quot; + actual</span>
</span><span class='line'>        <span class="s2">&quot;oops&quot;</span>    <span class="c1">// &lt;- replace error message</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s add the test to protect from this kind of mutation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal 42, but got: 29&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fails with <code>Error: oops</code>, because <code>assertThrow</code> uses <code>assertEqual</code>. Stack trace shows, that the failure is happening here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js in assertThrow</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that is the expected failure. We can fix it by always providing the message <code>"Expected to equal 42, but got: 29"</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js in assertions</span>
</span><span class='line'><span class="nx">assertEqual</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">expected</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Expected to equal 42, but got: 29&quot;</span>
</span><span class='line'>    <span class="c1">// ^ here the exact constant is used ^</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>This needs some more triangulation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFailure_withDifferentExpectedAndActual</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal 94, but got: 1027&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">94</span><span class="p">,</span> <span class="mi">1027</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal 42, but got: 29</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fix:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">expected</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we are done now with testing the <code>assertEqual</code> function. The <code>AssertEqualTest</code> suite is looking like that now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/AssertEqualTest.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testSuccess_whenExpectedIsDifferent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testFailure</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal 42, but got: 29&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testFailure_withDifferentExpectedAndActual</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">assertThrow</span><span class="p">(</span><span class="s2">&quot;Expected to equal 94, but got: 1027&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="mi">94</span><span class="p">,</span> <span class="mi">1027</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final <code>assertions</code> object after all the testing</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">errorMessage</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">errorMessage</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assertEqual</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">expected</span> <span class="o">==</span> <span class="nx">actual</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assertThrow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">action</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">hasThrown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="nx">expectedMessage</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>            <span class="nx">hasThrown</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Expected to throw an error, but nothing was thrown&quot;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bottom Line</h2>

<p>Congratulations! We have completely unit-tested our assertions <code>assertTrue</code> and <code>assertEqual</code>. This resulted in natural emergence of the new assertion - <code>assertThrow</code>. We have unit-tested it too!</p>

<p>Additionally, we have practiced usage of Mutational Testing and Triangulation Technique to detect missing test cases and derive them from the code. Also, we have slightly touched the Parallel Change refactoring technique - we will see more of that in the future in these series.</p>

<p>The code is available on Github: <a href="https://github.com/waterlink/BuildYourOwnTestingFrameworkPart2">https://github.com/waterlink/BuildYourOwnTestingFrameworkPart2</a></p>

<p>Now that we have unit-tested some basic assertions, we should unit-test our testing framework test runner: <code>runTestSuite</code> function. This will be covered in next series of &ldquo;Build Your Own Testing Framework&rdquo;. Stay tuned!</p>

<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own Testing Framework]]></title>
    <link href="http://www.tddfellow.com/blog/2016/07/15/build-your-own-testing-framework/"/>
    <updated>2016-07-15T08:00:06+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/07/15/build-your-own-testing-framework</id>
    <content type="html"><![CDATA[<p>Today we are going to test-drive the testing framework without any external testing framework.
This will be done through test-driving a simple kata (FizzBuzzKata). For example:</p>

<ul>
<li>every time we expect a test to fail and it doesn&rsquo;t, this is a failing test for our testing framework, that we will be fixing,</li>
<li>every time we expect a test to pass and it doesn&rsquo;t, this is another failing test for our testing framework, that we will be fixing.</li>
</ul>


<p>For practical reasons, today we are going to use concrete programming language instead of pseudo-code - javascript. Except for small details, that we will point out, the techniques shown here are language-agnostic.</p>

<p>This article is only first one of the series &ldquo;Build Your Own Testing Framework&rdquo;, so make sure to stick around for next parts! All articles of these series can be found here: <a href="http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/.">http://www.tddfellow.com/blog/categories/build-your-own-testing-framework/.</a></p>

<p>Shall we begin?</p>

<h2>FizzBuzzKata</h2>

<p>Given the number,</p>

<ul>
<li>return <code>Fizz</code> when the number is divisible by 3,</li>
<li>return <code>Buzz</code> when the number is divisible by 5,</li>
<li>return <code>FizzBuzz</code> when the number is divisible by 3 and 5,</li>
<li>return string representation of number otherwise.</li>
</ul>


<h2>Writing your first test</h2>

<p>How do we write our first test, when we don&rsquo;t have a testing framework and we want to create one? - It seems, that we have to design how the test should like in our brand new testing framework.</p>

<p>I personally, would go with the xUnit-like design, since it is relatively simple. Given this, we might write our first test and it will look something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/FizzBuzzKataTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test should fail, because function <code>fizzBuzz</code> is not defined, but it doesn&rsquo;t fail, since function <code>testNormalNumberIsReturned</code> is never called. In fact, the object with <code>FizzBuzzKataTest</code> is never being created.</p>

<p>Easiest way to solve that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/FizzBuzzKataTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FizzBuzzKataTest</span><span class="p">();</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run this code with <code>node</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node <span class="nb">test</span>/FizzBuzzKataTest.js
</span></code></pre></td></tr></table></div></figure>


<p>We will get the expected error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/path/to/project/test/FizzBuzzKataTest.js:3
</span><span class='line'>        this.assertTrue<span class="o">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> fizzBuzz<span class="o">(</span>1<span class="o">))</span><span class="p">;</span>
</span><span class='line'>                               ^
</span><span class='line'>
</span><span class='line'>ReferenceError: fizzBuzz is not defined
</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s define this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/FizzBuzzKataTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run our test again, we will get the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/test/FizzBuzzKataTest.js:3</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>             <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly, to fix it we need to define <code>assertTrue</code> on <code>FizzBuzzKataTest</code> object. Obviously, we do not want our user to define all their assertion for every test suite. This means, that we want to define it on <code>FizzBuzzKataTest</code> object outside of the definition of <code>FizzBuzzKataTest</code>.</p>

<p>There are two ways to go about it:</p>

<ul>
<li>inheritance: make <code>FizzBuzzKataTest</code> inherit from some other object function <code>assertTrue</code>, or</li>
<li>composition: make <code>FizzBuzzKataTest</code> accept a special object with function <code>assertTrue</code> defined on it.</li>
</ul>


<p>I would like to go with composition method since it gives us more flexibility in the long run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the usage of <code>assertTrue</code> has to change appropriately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>t</code> has to be created and passed in correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FizzBuzzKataTest</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the test suite again, we will not get any failure anymore. But we were expecting <code>assertTrue</code> to fail, so let&rsquo;s make it fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but was false&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run the test suite, we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/test/FizzBuzzKataTest.js:11</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">be</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s customize the error message a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="s2">&quot;1&quot;</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running this, we are getting the expected error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/test/FizzBuzzKataTest.js:11</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks better now. Let&rsquo;s fix the error now by implementing the simplest thing that could work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as we run our test suite we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/test/FizzBuzzKataTest.js:13</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, it should have passed the test. I know why it didn&rsquo;t: we throw this error unconditionally, let&rsquo;s add an appropriate <code>if</code> statement to <code>assertTrue</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(...);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run this code, it does not fail. That was our first green state - it took as awhile to get here. The reason for this is that we are not only test-driving <code>FizzBuzzKata</code>, additionally, we are writing a feature test for a non-existing testing framework. Now that we are green, we should think about refactoring, i.e.: making the structure of our code right.</p>

<p>Obviously, we should move our testing framework code outside of the test suite file. Probably, somewhere in <code>src/TestingFramework.js</code>. For that, we need to first parametrize <code>FizzBuzzKataTest</code> and extract the function to run the test suite.</p>

<p>Parametrize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">testSuiteConstructor</span> <span class="o">=</span> <span class="nx">FizzBuzzKataTest</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'><span class="nx">testSuite</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and extract method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">testSuite</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">testSuiteConstructor</span> <span class="o">=</span> <span class="nx">FizzBuzzKataTest</span><span class="p">;</span>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and inline the variable <code>testSuiteConstructor</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">FizzBuzzKataTest</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it is time to move testing code to <code>src/TestingFramework.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">testSuite</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to be able to require <code>runTestSuite</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">runTestSuite</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, finally, let&rsquo;s use that from our test suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/FizzBuzzKataTest.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../src/TestingFramework&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">FizzBuzzKataTest</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">FizzBuzzKataTest</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the test suite again, everything should pass. Somehow, I don&rsquo;t feel comfortable now, let&rsquo;s try to break the test suite and see if it will fail as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;2&quot;</span><span class="p">;</span>  <span class="c1">// &lt;-- &quot;1&quot; was changed to &quot;2&quot; here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/src/TestingFramework.js:4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it still works as expected. We have just introduced a Mutation to our code, to see if it is still tested properly. Let&rsquo;s undo the Mutation and see the test still pass. And it does.</p>

<p>If you look closely now, it should be possible to inline <code>FizzBuzzKataTest</code> definition as an argument of <code>runTestSuite</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">runTestSuite</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(...);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTestSuite</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run our test suite, it still works. Just to check, that we are still good, let&rsquo;s repeat our Mutation from the previous step. It should still fail as expected. And it does. Undo the mutation and the test is still passing. Great.</p>

<p>I think we are done with Refactoring step, for now, let&rsquo;s get back to writing another failing test.</p>

<h2>Writing the second test</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAnotherNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;2&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="s2">&quot;2&quot;</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run these tests, they do not fail. This is strange, let&rsquo;s look at <code>runTestSuite</code> function again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">testSuite</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, it just runs one specific function, we should probably run all functions starting from <code>test</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">runTestSuite</span><span class="p">(</span><span class="nx">testSuiteConstructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">testSuite</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">testSuiteConstructor</span><span class="p">(</span><span class="nx">assertions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">testName</span> <span class="k">in</span> <span class="nx">testSuite</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">testName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^test/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">testSuite</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>REMARK: this code is Javascript specific. Other programming languages will have their own way of iterating over the function/method list and calling a function by its name. Usually, it is some sort of reflection for compiled languages and meta-programming features for interpreted languages.</em></p>

<p>If we run tests now, we get the expected failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/src/TestingFramework.js:4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we try to change <code>return "1"</code> to <code>return "2"</code>, of course this test will pass, but the other will fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/path/to/project/src/TestingFramework.js:4</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;Expected to be true, but got false&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">got</span><span class="o">:</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is great for couple of reasons:</p>

<ul>
<li>It validates, that our change to how <code>test*</code> functions are discovered is correct, and</li>
<li>We have to have a bit smarter implementation to pass both tests now:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run the tests, they pass. Now, that we are in Green state, we should start refactoring. Have you noticed the duplication already?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="s2">&quot;1&quot;</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and:</span>
</span><span class='line'>
</span><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="s2">&quot;2&quot;</span> <span class="o">===</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="s2">&quot;2&quot;</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Extracting <code>"1"</code> and <code>"2"</code> as variable <code>expected</code>, and <code>fizzBuzz(1)</code> and <code>fizzBuzz(2)</code> as variable <code>actual</code>, makes these 2 lines identical:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">expected</span> <span class="o">===</span> <span class="nx">actual</span><span class="p">,</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAnotherNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">expected</span> <span class="o">===</span> <span class="nx">actual</span><span class="p">,</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Specifically, this is identical:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span><span class="nx">expected</span> <span class="o">===</span> <span class="nx">actual</span><span class="p">,</span> <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sounds like <code>t.assertEqual(expected, actual)</code> to me. So let&rsquo;s extract it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/TestingFramework.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">assertions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assertTrue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">condition</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assertEqual</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expected</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">assertTrue</span><span class="p">(</span>
</span><span class='line'>          <span class="nx">expected</span> <span class="o">===</span> <span class="nx">actual</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Expected to equal &quot;</span> <span class="o">+</span> <span class="nx">expected</span> <span class="o">+</span> <span class="s2">&quot;, but got: &quot;</span> <span class="o">+</span> <span class="nx">actual</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s use it and inline our <code>expected</code> and <code>actual</code> variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testAnotherNormalNumberIsReturned</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks much more readable. If we run tests, they still pass. If we try to break our code by using some Mutation, the tests fail as expected. Great, our refactoring was a success!</p>

<p>Let&rsquo;s finish test-driving our <code>fizzBuzz</code> function.</p>

<h2>Test-Driving Fizz Buzz Kata</h2>

<p>First test for <code>Fizz</code> case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFizzIsReturned</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Fizz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal Fizz, but got: 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty stupid implementation, but it works for that one tests, so let&rsquo;s write the test, that will break this implementation and force us to write real <code>if</code> condition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFizzIsReturnedForDifferentNumber</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Fizz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal Fizz, but got: 6</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This technique is called Triangulation:</p>

<ul>
<li>the first test is to force us to write some <code>if</code> statement with a correct body,</li>
<li>second is to force us to make the condition right.</li>
<li>If we had an <code>else</code> clause, we would have had another test to make that part right.</li>
</ul>


<p>OK, that looks like a right implementation for <code>Fizz</code>, let&rsquo;s write the test for <code>Buzz</code> now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testBuzzIsReturned</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Buzz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal Buzz, but got: 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// stupid implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">===</span> <span class="mi">5</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Triangulation:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testBuzzIsReturnedForDifferentNumber</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;Buzz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal Buzz, but got: 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// correct implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally let&rsquo;s implement final requirement <code>FizzBuzz</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFizzBuzzIsReturned</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;FizzBuzz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">15</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal FizzBuzz, but got: Buzz</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// stupid implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">===</span> <span class="mi">15</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;FizzBuzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Triangulation:</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">testFizzBuzzIsReturnedForDifferentNumber</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">assertEqual</span><span class="p">(</span><span class="s2">&quot;FizzBuzz&quot;</span><span class="p">,</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="mi">30</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: Expected to equal FizzBuzz, but got: Buzz</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// correct implementation:</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fizzBuzz</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;FizzBuzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Buzz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="s2">&quot;Fizz&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we are done with the implementation. <code>FizzBuzzKata</code> has an extended set of requirements, but they are out of the scope of this article. These requirements force us to introduce Strategy pattern and stop using this unmaintainable chain of <code>if</code> statements.</p>

<p>Refactoring this code to Strategy pattern is left as an exercise for the reader.</p>

<h2>Bottom Line</h2>

<p>Congratulations! Using <code>FizzBuzzKata</code> we have test-driven bare-bones testing framework to the point, that we can do Test-Driven Development for a simple Kata. And all that without having any testing framework in place.</p>

<p>The code is available on Github: <a href="https://github.com/waterlink/BuildYourOwnTestingFrameworkPart1">https://github.com/waterlink/BuildYourOwnTestingFrameworkPart1</a></p>

<p>Now, with this minimal framework in place, it should be possible to unit-test the framework itself, so that we can support more use cases. This will be covered in next series of &ldquo;Build Your Own Testing Framework&rdquo;. Stay tuned!</p>

<h2>Thanks!</h2>

<p>Thank you for reading, my dear reader. If you liked it, please share this article on social networks and follow me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you have any questions or feedback for me, don&rsquo;t hesitate to reach me out on Twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TL;DR on Sustainable Software Development Paper]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/28/tl-dr-on-sustainable-software-development-paper/"/>
    <updated>2016-06-28T02:22:07+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/28/tl-dr-on-sustainable-software-development-paper</id>
    <content type="html"><![CDATA[<p>This is a TL;DR of a white paper <a href="https://www.researchgate.net/publication/304014117_Sustainable_Software_Development_through_Overlapping_Pair_Rotation">Sustainable Software Development through Overlapping Pair Rotation</a> that is created by Todd Sedano, Paul Ralph, and Cécile Péraire.</p>

<p><em>NOTE: this TL;DR includes a lot of compressed awesome information.</em></p>

<h2>Theory of Sustainable Software Development</h2>

<p>The paper introduces us to principles, policies, and practices, that are the results of applying of <a href="https://en.wikipedia.org/wiki/Grounded_theory#Constructivist_grounded_theory">Constructivist Grounded Theory</a> research method to the five projects at Pivotal Labs.</p>

<h3>Principles</h3>

<ol>
<li>By <strong>Engendering Positive Attitudes Toward Disruption</strong> teams can transform a challenge of team disruption into a business opportunity:

<ul>
<li>team members rolling off from the project are replaced with new members,</li>
<li>new members are viewed as a source of fresh perspective and as an opportunity,</li>
<li>new members often questioned team&rsquo;s assumptions (challenging &ldquo;cargo culting&rdquo;).</li>
</ul>
</li>
<li>Policies &amp; practices that <strong>Encourage Knowledge Sharing and Continuity</strong> mitigate the risk of significant knowledge loss for the project when the team is disrupted. Policies are:

<ul>
<li><strong>Team Code Ownership</strong>, and <strong>Shared Team Schedule</strong>. While practices are:</li>
<li><strong>Continuous Pair Programming</strong>, <strong>Overlapping Pair Rotation</strong> and <strong>Knowledge Pollination</strong>.</li>
</ul>
</li>
<li>Sustainable development is not possible if the team is incurring the technical debt. <strong>Caring about Code Quality</strong> is a way to mitigate this risk. Policy here is:

<ul>
<li><strong>Avoid Technical Debt</strong>, and practices are:</li>
<li><strong>Test-Driven Development</strong> / <strong>Behavior-Driven Development</strong> and <strong>Continuous Refactoring</strong>.</li>
</ul>
</li>
</ol>


<h3>Policies</h3>

<ol>
<li><strong>Team Code Ownership</strong>: every developer is empowered to work on and to refactor any part of the team&rsquo;s code.</li>
<li><strong>Shared Schedule</strong>: every team member has agreed to a fixed schedule to achieve the benefits of Sustainable Software Development. Teams are, preferably, co-located.</li>
<li><strong>Avoid Technical Debt</strong>: a pair creates well-crafted code without shortcuts and short-term fixes. Solutions are best and simplest for <strong>current present</strong> without over-engineering. When inherited a legacy code base, a team is actively paying down technical debt while delivering new features.</li>
</ol>


<h3>Removing Knowledge Silos Practices</h3>

<ol>
<li><strong>Continuous Pair Programming</strong>: two developers are collaborating to write software together as their normal mode of software development. It enables knowledge transfer, reduces knowledge silos and improves code quality. Developers always work in pairs, unless exceptional circumstances arise.</li>
<li><strong>Overlapping Pair Rotation</strong>: one developer rolls off the track of work and another developer rolls on, keeping the continuity of one developer at each rotation. It results in knowledge continuity. There are three strategies for spreading the knowledge via pair rotation when fighting emerging knowledge silos:

<ul>
<li>Optimizing for people rotation: developers try to pair with the person they &ldquo;least recently paired with&rdquo;;</li>
<li>Optimizing for personal preferences: developer pick with whom they will pair at each rotation, based on personal preferences;</li>
<li>Optimizing for context sharing: a developer who has not been working on the track for the longest track is rotating onto the track. The goal each day is for the developer leaving the track next to empower the developer who will remain on the track.</li>
</ul>
</li>
<li><strong>Knowledge Pollination</strong>:

<ul>
<li>Daily stand-ups create awareness of who is working on what.</li>
<li>Using backlog to communicate information and status of stories.</li>
<li>Osmotic communication: a developer overhears a discussion in other pair and offers their help.</li>
<li>The pair can interrupt another pair, product manager or designer to gain the needed information.</li>
<li>Calling out updates to the entire team.</li>
<li>Interruptions are encouraged - it makes the team more efficient as knowledge pollinates across the team.</li>
</ul>
</li>
</ol>


<h3>Caretaking the Code Practices</h3>

<ol>
<li><strong>Test-Driven Development/Behavior-Driven Development</strong>: developers use BDD (to describe interactions between the user and the system) and TDD (at unit test level). Design emerges from the creation and exploration of the test cases. Teams use a variety of TDD strategies, including:

<ul>
<li>testing the responsibilities and interactions, or</li>
<li>contract testing using mocks.</li>
</ul>
</li>
<li><strong>Continuous Refactoring</strong>: developers do refactoring as part of implementing feature stories. Developers are encouraged to improve the code&rsquo;s design, make the code easier to read, understand, and increase the discoverability of a component based on its responsibility. The team prefers <strong>pre-refactoring</strong>, where the developer makes a complicated work to make the current story as simple and as easy as possible.</li>
<li><strong>Live on Master</strong>: every pair merges their code to master many times a day. Developers may use branches to save &ldquo;spikes&rdquo; and to move work-in-progress between pairing stations when rotating.</li>
</ol>


<h2>Thanks!</h2>

<p>This is where this TL;DR ends. If you are interested in the topic, go ahead and read the paper, it has the following:</p>

<ul>
<li>Detailed description of the research method, data collection, and analysis;</li>
<li>Research context and one project case study;</li>
<li>Detailed description of Principles, Policies, and Practices of Sustainable Software Development; also anti-patterns for each policy and practice;</li>
<li>Theory evaluation and conclusions.</li>
</ul>


<p>Great thanks to the original authors of the paper, researchers, and all participants!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Use Mocking Frameworks Anymore]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/21/why-i-dont-use-mocking-frameworks-anymore/"/>
    <updated>2016-06-21T08:04:10+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/21/why-i-dont-use-mocking-frameworks-anymore</id>
    <content type="html"><![CDATA[<p>Some time ago, I have discovered, that using your own custom test double classes, instead of a test framework makes my test code more readable and maintainable. Here is an example (pseudo-code):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">test_password_revealer_when_toggled_reveals_password</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">passwordController</span> <span class="o">=</span> <span class="nx">MockPasswordController</span><span class="p">.</span><span class="k">new</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">passwordRevealer</span> <span class="o">=</span> <span class="nx">PasswordRevealer</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">passwordController</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">passwordRevealer</span><span class="p">.</span><span class="nx">toggle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">passwordController</span><span class="p">.</span><span class="nx">isRevealed</span><span class="p">()).</span><span class="nx">toBeTrue</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same test with mocking framework would look this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">test_password_revealer_when_toggled_reveals_password</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">passwordController</span> <span class="o">=</span> <span class="nx">MockFramework</span><span class="p">.</span><span class="nx">Mock</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="s2">&quot;PasswordController&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">passwordRevealer</span> <span class="o">=</span> <span class="nx">PasswordRevealer</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">passwordController</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spy</span> <span class="o">=</span> <span class="nx">spyOn</span><span class="p">(</span><span class="nx">passwordController</span><span class="p">.</span><span class="nx">reveal</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">passwordRevealer</span><span class="p">.</span><span class="nx">toggle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">spy</span><span class="p">.</span><span class="nx">haveBeenCalled</span><span class="p">()).</span><span class="nx">toBeTrue</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you take a closer look at the last example, and, specifically at these 2 lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">spy</span> <span class="o">=</span> <span class="nx">spyOn</span><span class="p">(</span><span class="nx">passwordController</span><span class="p">.</span><span class="nx">reveal</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">spy</span><span class="p">.</span><span class="nx">haveBeenCalled</span><span class="p">()).</span><span class="nx">toBeTrue</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>They use a language, that is not relevant to the domain, therefore, they make the test less readable.</p>

<p>Additionally, they have knowledge of which exactly method <code>PasswordRevealer#toggle()</code> should call on <code>passwordController</code>. If we were to rename <code>reveal</code> method, all tests for <code>PasswordRevealer</code> would fail.
The same thing would happen if we were to extract methods/functions/objects out of the <code>PasswordRevealer</code>.</p>

<p>Of course, creating such test doubles yourself will involve some boilerplate code - this is a trade-off. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">MockPasswordController</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">reveal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s2">&quot;revealed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">hide</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">isRevealed</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">==</span> <span class="s2">&quot;revealed&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Making this trade-off, will simplify the case when we were to change the name: we would change the name at 3 places:</p>

<ul>
<li>in test double class,</li>
<li>in caller class,</li>
<li>in &ldquo;real&rdquo; implementation class.</li>
</ul>


<p>Whereas with a mocking framework, we would have to hunt for all failing tests, and usually, it means hundreds of failing tests.</p>

<h2>Thank you!</h2>

<p>If you, my dear reader, have any thoughts, questions or arguments about the topic, feel free to reach out to me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you liked my ideas, follow me on twitter, and, even better, provide me with your honest feedback, so that I can improve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD #5: English Numbers Kata]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/19/tdd-number-5-english-numbers-kata/"/>
    <updated>2016-06-19T18:41:39+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/19/tdd-number-5-english-numbers-kata</id>
    <content type="html"><![CDATA[<iframe src="https://player.vimeo.com/video/171307899?color=c9ff23" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/171307899">Test-Driven Development Screencast #5: English Numbers Kata</a></p>

<p><em>(Recommended to watch full-screen and HD: 720p or more)</em></p>

<p>List of all TDD Screencasts can be <a href="http://www.tddfellow.com/blog/categories/tdd-screencasts/">found here</a>.</p>

<p>This screencast was born from my previous blog post: <a href="http://www.tddfellow.com/blog/2016/05/27/iterative-divide-and-conquer-or-how-to-solve-problems/">Iterative Divide &amp; Conquer or How to solve problems</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD as an Enabling Practice or How to Be Faster With TDD]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/13/tdd-as-an-enabling-practice-or-how-to-be-faster-with-tdd/"/>
    <updated>2016-06-13T07:52:56+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/13/tdd-as-an-enabling-practice-or-how-to-be-faster-with-tdd</id>
    <content type="html"><![CDATA[<p>Recently I had a lot of conversations with so many different programmers, with different backgrounds, contexts of work and opinions. What stroke me the most, is that majority feel that TDD is slower than simple automated testing, i.e., <code>TestFirst</code> is slower than <code>TestAfter</code>.</p>

<p>While digging deeper in their context of work, I could only agree with them: &ldquo;True, in that context it will be about 50% slower&rdquo;.</p>

<p>Most of the time, though, the context is somewhat looking like this:</p>

<ul>
<li>We have some company <code>ACME</code>, that does some sort of Agile Software Development (probably Scrum);</li>
<li>The company <code>ACME</code> focuses only on the business parts of Agile Software Development;</li>
<li>The company <code>ACME</code> tried to introduce TDD as a development practice;</li>
<li>Everything took much longer to be done.</li>
</ul>


<h2>Enabling practice</h2>

<p>Now, let us dive into the development practices of Agile Software Development: development practices are usually coming from Extreme Programming (XP). In XP there are 2 terms: <code>EnablingPractice</code> and <code>ExploitativePractice</code>.</p>

<p>Exploitative practice gives direct benefit to the team, e.g.: speed boost and quicker feedback from users and stakeholders.</p>

<p>Enabling practice is required for certain other exploitative practice(s) to work.</p>

<p>A good example of exploitative practice is Continuous Delivery. It requires Continuous Integration, Pair-Programming, and Testing to be in place. These 3 are enabling practices.</p>

<h2>Removing slow practices</h2>

<p>Additionally to allowing usage of practices, that make a team go faster and deliver at the higher quality level, enabling practices allow removal of practices, that make a team go slower. For example, Pair-Programming together with TDD allows removal of code review. On most of the teams (especially, of bigger size), this makes for an instant productivity boost.</p>

<p>Pair-Programming, TDD and Continuous Integration, additionally to enabling the team to do Continuous Delivery, also allows replacing feature-branch VCS flow with a trunk-based flow. This allows for smaller iterations and faster user feedback.</p>

<h2>Pair-Programming Done Right</h2>

<p>It is worth noting, that removal of code review and introducing of Continuous Delivery is only possible, if Pair-Programming is done right:</p>

<ul>
<li>in no case, two beginners should be working in the pair;</li>
<li>beginners should work together with advanced beginners/competents and proficients/experts;</li>
<li>advanced beginners/competents should split their time in half between working with beginners and working with proficient/experts.</li>
</ul>


<p>Terminology <code>Beginner</code>, <code>AdvancedBeginner</code>, <code>Competent</code>, <code>Proficient</code> and <code>Expert</code> is from Dreyfus Skill Acquisition Model.</p>

<p>That allows for a good trust and mentorship models in your team(s). It enables quick growth and knowledge sharing for every member of the team.</p>

<p>There is another enabling practice which speeds up the knowledge sharing, it is Pair Rotation, that should be done from 1 to 2 times per day, so that for small and middle-sized teams, the bigger the feature is, the higher chance, that everyone on the team have participated in its development, and therefore have enough knowledge about it.</p>

<p>Additionally, Pair Rotation allows for Code Detachment and removal of Code Silos. This in turn, together with TDD, enables Ruthless Refactoring, because you are not afraid:</p>

<ul>
<li>to break the code, thanks to TDD,</li>
<li>to upset an owner of the Code Silo, because there is no owner, thanks to Pair Rotation.</li>
</ul>


<h2>Bottomline</h2>

<p>I think I can go on like this forever, but I believe the idea should be clear. I will be following up with more articles in details on each technique in the future. Stay tuned!</p>

<h2>Thank you for reading!</h2>

<p>If you, my dear reader, have any thoughts, questions or arguments about the topic, feel free to reach out to me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<p>If you liked my ideas, follow me on twitter, and, even better, provide me with your honest feedback, so that I can improve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Manual Checks or How to Save Time and Get Rapid Feedback]]></title>
    <link href="http://www.tddfellow.com/blog/2016/06/05/automating-manual-checks-or-how-to-save-time-and-get-rapid-feedback/"/>
    <updated>2016-06-05T12:37:22+02:00</updated>
    <id>http://www.tddfellow.com/blog/2016/06/05/automating-manual-checks-or-how-to-save-time-and-get-rapid-feedback</id>
    <content type="html"><![CDATA[<p><em>It is tedious, slow and error-prone to test correctness of program manually. This article is an introduction, how to make this process as simple as a hit of one button, very fast and precise.</em></p>

<p>In the last issue <a href="http://www.tddfellow.com/blog/2016/05/27/iterative-divide-and-conquer-or-how-to-solve-problems/">about Iterative Divide &amp; Conquer</a> we have found out, how it is tedious to manually check that our program works correctly.</p>

<p>We have concluded, that it is tedious and slow to manually check that the output of our <code>print</code> statements is correct. Additionally, it is really easy to make a mistake and to oversee incorrect lines of the output, especially, when we have tons of them. As well, this applies to any other form of manual testing, including testing the application as an End User (via clicking/tapping for UI applications, via executing tons of commands for CLI applications).</p>

<h2>Mitigating human error-proneness via automation</h2>

<p>Let&rsquo;s get back to our example from the previous issue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">print</span> <span class="n">english_integer_in_tens</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>    <span class="c1"># twenty</span>
</span><span class='line'><span class="nb">print</span> <span class="n">english_integer_in_tens</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span>    <span class="c1"># twenty-seven</span>
</span><span class='line'><span class="nb">print</span> <span class="n">english_integer_in_tens</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>    <span class="c1"># forty-two</span>
</span><span class='line'><span class="nb">print</span> <span class="n">english_integer_in_tens</span><span class="p">(</span><span class="mi">70</span><span class="p">)</span>    <span class="c1"># seventy</span>
</span><span class='line'><span class="nb">print</span> <span class="n">english_integer_in_tens</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>    <span class="c1"># ninety-nine</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if we could ask our computer to run <code>english_integer_in_tens</code> function with provided arguments and check that the output is exactly what we provided in a comment?</p>

<p>Let&rsquo;s try to put it in pseudo-code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_integer_in_tens</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="s2">&quot;twenty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_integer_in_tens</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="s2">&quot;forty-two&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run that code, of course, we will get some sort of compilation error, or runtime error (depending on the programming language), because function <code>equal</code> is not defined yet. Let&rsquo;s define it! Presumably, it should be comparing left argument with right argument and printing something useful on the screen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">equal</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">left</span> <span class="o">!=</span> <span class="nx">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="s2">&quot;Failure: &quot;</span> <span class="o">+</span> <span class="nx">left</span> <span class="o">+</span> <span class="s2">&quot; should be equal to &quot;</span> <span class="o">+</span> <span class="nx">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="s2">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the program after defining this function we will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="nx">OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we were to break the function <code>english_integer_in_tens</code>&rsquo;s implementation, we might get something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="nx">Failure</span><span class="o">:</span> <span class="nx">twenty</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">equal</span> <span class="nx">to</span> <span class="nx">forty</span><span class="o">-</span><span class="nx">two</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making automation nicer</h2>

<p>Having all this output every time we import our small library in any application going to the standard output would be annoying to say the least. How about separating the test automation from the library?</p>

<p>Let&rsquo;s extract all our testing <code>print</code>-s into the separate file, import original file from it and replace all <code>print</code>-s with <code>equal</code>-s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">english_integer</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">equal</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_number</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="s2">&quot;zero&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_number</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s2">&quot;one&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_integer</span><span class="p">(</span><span class="mi">43</span><span class="p">),</span> <span class="s2">&quot;forty-three&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">english_integer</span><span class="p">(</span><span class="o">-</span><span class="mi">97</span><span class="p">),</span> <span class="s2">&quot;minus ninety-seven&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running only this separate file will produce expected output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="nx">OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>Importing or running directly our original library will not produce any output. This is much nicer.</p>

<h2>Thank you for reading!</h2>

<p>Today we have made our testing:</p>

<ul>
<li>easier: hit of one button, or one command on the terminal;</li>
<li>faster: from minutes of manual verification to milliseconds of automated checks;</li>
<li>preciser: automated checks can&rsquo;t make a mistake, if we have something except <code>OK</code> - we have an error, if everything is <code>OK</code> - the program is working correctly;</li>
<li>better feedback cycle: we can see if our change is correct in the matter of 1-2 seconds after making this change.</li>
</ul>


<p>Next time we will build a fully-functional mini testing framework. Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
